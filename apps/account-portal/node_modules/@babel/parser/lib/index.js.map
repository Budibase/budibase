{"version":3,"file":"index.js","sources":["../src/tokenizer/types.js","../src/util/whitespace.js","../src/util/location.js","../src/parser/base.js","../src/parser/comments.js","../src/parser/error-codes.js","../src/parser/error-message.js","../src/parser/error.js","../src/plugins/estree.js","../src/tokenizer/context.js","../../babel-helper-validator-identifier/src/identifier.ts","../../babel-helper-validator-identifier/src/keyword.ts","../src/util/identifier.js","../src/util/scopeflags.js","../src/util/scope.js","../src/plugins/flow/scope.js","../src/tokenizer/state.js","../src/tokenizer/index.js","../src/util/class-scope.js","../src/util/expression-scope.js","../src/util/production-parameter.js","../src/parser/util.js","../src/parser/node.js","../src/plugins/flow/index.js","../src/plugins/jsx/xhtml.js","../src/plugins/jsx/index.js","../src/plugins/typescript/scope.js","../src/plugins/typescript/index.js","../src/plugins/placeholders.js","../src/plugins/v8intrinsic.js","../src/plugin-utils.js","../src/options.js","../src/parser/lval.js","../src/parser/expression.js","../src/parser/statement.js","../src/parser/index.js","../src/index.js"],"sourcesContent":["// @flow\nimport type { TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\nexport class TokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  updateContext: ?(context: Array<TokContext>) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n}\n\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return new TokenType(name, { beforeExpr, binop });\n}\n\nexport const types: { [name: string]: TokenType } = {\n  num: new TokenType(\"num\", { startsExpr }),\n  bigint: new TokenType(\"bigint\", { startsExpr }),\n  decimal: new TokenType(\"decimal\", { startsExpr }),\n  regexp: new TokenType(\"regexp\", { startsExpr }),\n  string: new TokenType(\"string\", { startsExpr }),\n  name: new TokenType(\"name\", { startsExpr }),\n  privateName: new TokenType(\"#name\", { startsExpr }),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: new TokenType(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: new TokenType(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: new TokenType(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: new TokenType(\"#{\", { beforeExpr, startsExpr }),\n  braceR: new TokenType(\"}\", { beforeExpr }),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", { beforeExpr, startsExpr }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", { beforeExpr }),\n  semi: new TokenType(\";\", { beforeExpr }),\n  colon: new TokenType(\":\", { beforeExpr }),\n  doubleColon: new TokenType(\"::\", { beforeExpr }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", { beforeExpr }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", { beforeExpr }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", { beforeExpr }),\n  backQuote: new TokenType(\"`\", { startsExpr }),\n  dollarBraceL: new TokenType(\"${\", { beforeExpr, startsExpr }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: new TokenType(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", { beforeExpr, isAssign }),\n  assign: new TokenType(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: new TokenType(\"_=\", { beforeExpr, isAssign }),\n  // This is only needed to support % as a Hack-pipe topic token. If the proposal\n  // ends up choosing a different token, it can be merged with tt.assign.\n  moduloAssign: new TokenType(\"_=\", { beforeExpr, isAssign }),\n  incDec: new TokenType(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: new TokenType(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: new TokenType(\"~\", { beforeExpr, prefix, startsExpr }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: new TokenType(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: new TokenType(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", { isLoop }),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", { isLoop }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n};\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\nimport { lineBreakG } from \"./whitespace\";\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n\n  constructor(line: number, col: number) {\n    this.line = line;\n    this.column = col;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nexport function getLineInfo(input: string, offset: number): Position {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<*>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: ?string;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  hasPlugin(name: string): boolean {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    // $FlowIssue\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\n\n/**\n * A whitespace token containing comments\n * @typedef CommentWhitespace\n * @type {object}\n * @property {number} start - the start of the whitespace token.\n * @property {number} end - the end of the whitespace token.\n * @property {Array<Comment>} comments - the containing comments\n * @property {Node | null} leadingNode - the immediately preceding AST node of the whitespace token\n * @property {Node | null} trailingNode - the immediately following AST node of the whitespace token\n * @property {Node | null} containingNode - the innermost AST node containing the whitespace\n *                                         with minimal size (|end - start|)\n */\nexport type CommentWhitespace = {\n  start: number,\n  end: number,\n  comments: Array<Comment>,\n  leadingNode: Node | null,\n  trailingNode: Node | null,\n  containingNode: Node | null,\n};\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setTrailingComments(node: Node, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nexport function setInnerComments(node: Node, comments: Array<Comment> | void) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else if (comments !== undefined) {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n *\n * @param {Node} node\n * @param {Array<Node>} elements\n * @param {Array<Comment>} comments\n */\nfunction adjustInnerComments(\n  node: Node,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\n/** @class CommentsParser */\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   *\n   * @param {Node} node\n   * @returns {void}\n   * @memberof CommentsParser\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   *\n   * @memberof CommentsParser\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        commentWS.trailingNode.leadingComments = comments;\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaning commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   *\n   * @memberof CommentsParser\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterepret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing */\n  // async /* 1 */ function f() {}\n  /*\n   * the comment whitespace \"* 1 *\" has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark \"* 1 *\" as\n   * inner comments. So \"* 1 *\" should be detached from the Identifier node.\n   *\n   * @param {N.Node} node the last finished AST node _before_ current token\n   * @returns\n   * @memberof CommentsParser\n   */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n}\n","// @flow\n\nexport const ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n});\n\nexport type ErrorCode = $Values<typeof ErrorCodes>;\n","// @flow\n\nimport { makeErrorTemplates, ErrorCodes } from \"./error\";\n\n/* eslint sort-keys: \"error\" */\n\n/**\n * @module parser/error-message\n */\n\n// The Errors key follows https://cs.chromium.org/chromium/src/v8/src/common/message-template.h unless it does not exist\nexport const ErrorMessages = makeErrorTemplates(\n  {\n    AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n    ArgumentsInClass:\n      \"'arguments' is only allowed in functions and class methods.\",\n    AsyncFunctionInSingleStatementContext:\n      \"Async functions can only be declared at the top level or inside a block.\",\n    AwaitBindingIdentifier:\n      \"Can not use 'await' as identifier inside an async function.\",\n    AwaitBindingIdentifierInStaticBlock:\n      \"Can not use 'await' as identifier inside a static block.\",\n    AwaitExpressionFormalParameter:\n      \"'await' is not allowed in async function parameters.\",\n    AwaitNotInAsyncContext:\n      \"'await' is only allowed within async functions and at the top levels of modules.\",\n    AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n    BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n    BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n    BadSetterRestParameter:\n      \"A 'set' accesor function argument must not be a rest parameter.\",\n    ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n    ConstructorClassPrivateField:\n      \"Classes may not have a private field named '#constructor'.\",\n    ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n    ConstructorIsAsync: \"Constructor can't be an async function.\",\n    ConstructorIsGenerator: \"Constructor can't be a generator.\",\n    DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n    DecoratorBeforeExport:\n      \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n    DecoratorConstructor:\n      \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n    DecoratorExportClass:\n      \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n    DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n    DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n    DeletePrivateField: \"Deleting a private field is not allowed.\",\n    DestructureNamedImport:\n      \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n    DuplicateConstructor: \"Duplicate constructor in the same class.\",\n    DuplicateDefaultExport: \"Only one default export allowed per module.\",\n    DuplicateExport:\n      \"`%0` has already been exported. Exported identifiers must be unique.\",\n    DuplicateProto: \"Redefinition of __proto__ property.\",\n    DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n    ElementAfterRest: \"Rest element must be last element.\",\n    EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n    ExportBindingIsString:\n      \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n    ExportDefaultFromAsIdentifier:\n      \"'from' is not allowed as an identifier after 'export default'.\",\n    ForInOfLoopInitializer:\n      \"'%0' loop variable declaration may not have an initializer.\",\n    ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n    ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n    GeneratorInSingleStatementContext:\n      \"Generators can only be declared at the top level or inside a block.\",\n    IllegalBreakContinue: \"Unsyntactic %0.\",\n    IllegalLanguageModeDirective:\n      \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n    IllegalReturn: \"'return' outside of function.\",\n    ImportBindingIsString:\n      'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n    ImportCallArgumentTrailingComma:\n      \"Trailing comma is disallowed inside import(...) arguments.\",\n    ImportCallArity: \"`import()` requires exactly %0.\",\n    ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n    ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n    InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n    InvalidCodePoint: \"Code point out of bounds.\",\n    InvalidDecimal: \"Invalid decimal.\",\n    InvalidDigit: \"Expected number in radix %0.\",\n    InvalidEscapeSequence: \"Bad character escape sequence.\",\n    InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n    InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n    InvalidIdentifier: \"Invalid identifier %0.\",\n    InvalidLhs: \"Invalid left-hand side in %0.\",\n    InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n    InvalidNumber: \"Invalid number.\",\n    InvalidOrMissingExponent:\n      \"Floating-point numbers require a valid exponent after the 'e'.\",\n    InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n    InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n    InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n    InvalidPropertyBindingPattern: \"Binding member expression.\",\n    InvalidRecordProperty:\n      \"Only properties and spread elements are allowed in record definitions.\",\n    InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n    LabelRedeclaration: \"Label '%0' is already declared.\",\n    LetInLexicalBinding:\n      \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n    LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n    MalformedRegExpFlags: \"Invalid regular expression flag.\",\n    MissingClassName: \"A class name is required.\",\n    MissingEqInAssignment:\n      \"Only '=' operator can be used for specifying default value.\",\n    MissingSemicolon: \"Missing semicolon.\",\n    MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n    MixingCoalesceWithLogical:\n      \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n    ModuleAttributeDifferentFromType:\n      \"The only accepted module attribute is `type`.\",\n    ModuleAttributeInvalidValue:\n      \"Only string literals are allowed as module attribute values.\",\n    ModuleAttributesWithDuplicateKeys:\n      'Duplicate key \"%0\" is not allowed in module attributes.',\n    ModuleExportNameHasLoneSurrogate:\n      \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n    ModuleExportUndefined: \"Export '%0' is not defined.\",\n    MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n    NewlineAfterThrow: \"Illegal newline after throw.\",\n    NoCatchOrFinally: \"Missing catch or finally clause.\",\n    NumberIdentifier: \"Identifier directly after number.\",\n    NumericSeparatorInEscapeSequence:\n      \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n    ObsoleteAwaitStar:\n      \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n    OptionalChainingNoNew:\n      \"Constructors in/after an Optional Chain are not allowed.\",\n    OptionalChainingNoTemplate:\n      \"Tagged Template Literals are not allowed in optionalChain.\",\n    OverrideOnConstructor:\n      \"'override' modifier cannot appear on a constructor declaration.\",\n    ParamDupe: \"Argument name clash.\",\n    PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n    PatternHasMethod: \"Object pattern can't contain methods.\",\n    PipeBodyIsTighter:\n      \"Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n    PipeTopicRequiresHackPipes:\n      'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n    PipeTopicUnbound:\n      \"Topic reference is unbound; it must be inside a pipe body.\",\n    PipeTopicUnconfiguredToken:\n      'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"%0\" }.',\n    PipeTopicUnused:\n      \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n\n    // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n    // are retained for backwards compatibility\n    // with the deprecated smart-mix pipe operator proposal plugin.\n    // They are subject to removal in a future major version.\n    PipelineBodyNoArrow:\n      'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n    PipelineBodySequenceExpression:\n      \"Pipeline body may not be a comma-separated sequence expression.\",\n    PipelineHeadSequenceExpression:\n      \"Pipeline head should not be a comma-separated sequence expression.\",\n    PipelineTopicUnused:\n      \"Pipeline is in topic style but does not use topic reference.\",\n    PrimaryTopicNotAllowed:\n      \"Topic reference was used in a lexical context without topic binding.\",\n    PrimaryTopicRequiresSmartPipeline:\n      'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n\n    PrivateInExpectedIn:\n      \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n    PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n    RecordExpressionBarIncorrectEndSyntaxType:\n      \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    RecordExpressionBarIncorrectStartSyntaxType:\n      \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    RecordExpressionHashIncorrectStartSyntaxType:\n      \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n    RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n    RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n    SloppyFunction:\n      \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n    StaticPrototype: \"Classes may not have static property named prototype.\",\n    StrictDelete: \"Deleting local variable in strict mode.\",\n    StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n    StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n    StrictFunction:\n      \"In strict mode code, functions can only be declared at top level or inside a block.\",\n    StrictNumericEscape:\n      \"The only valid numeric escape in strict mode is '\\\\0'.\",\n    StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n    StrictWith: \"'with' in strict mode.\",\n    SuperNotAllowed:\n      \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n    SuperPrivateField: \"Private fields can't be accessed on super.\",\n    TrailingDecorator: \"Decorators must be attached to a class element.\",\n    TupleExpressionBarIncorrectEndSyntaxType:\n      \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    TupleExpressionBarIncorrectStartSyntaxType:\n      \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    TupleExpressionHashIncorrectStartSyntaxType:\n      \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n    UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n    UnexpectedAwaitAfterPipelineBody:\n      'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n    UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n    UnexpectedImportExport:\n      \"'import' and 'export' may only appear at the top level.\",\n    UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n    UnexpectedLeadingDecorator:\n      \"Leading decorators must be attached to a class declaration.\",\n    UnexpectedLexicalDeclaration:\n      \"Lexical declaration cannot appear in a single-statement context.\",\n    UnexpectedNewTarget:\n      \"`new.target` can only be used in functions or class properties.\",\n    UnexpectedNumericSeparator:\n      \"A numeric separator is only allowed between two digits.\",\n    UnexpectedPrivateField:\n      \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n    UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n    UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n    UnexpectedToken: \"Unexpected token '%0'.\",\n    UnexpectedTokenUnaryExponentiation:\n      \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n    UnsupportedBind: \"Binding should be performed on object property.\",\n    UnsupportedDecoratorExport:\n      \"A decorated export must export a class declaration.\",\n    UnsupportedDefaultExport:\n      \"Only expressions, functions or classes are allowed as the `default` export.\",\n    UnsupportedImport:\n      \"`import` can only be used in `import()` or `import.meta`.\",\n    UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n    UnsupportedParameterDecorator:\n      \"Decorators cannot be used to decorate parameters.\",\n    UnsupportedPropertyDecorator:\n      \"Decorators cannot be used to decorate object literal properties.\",\n    UnsupportedSuper:\n      \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n    UnterminatedComment: \"Unterminated comment.\",\n    UnterminatedRegExp: \"Unterminated regular expression.\",\n    UnterminatedString: \"Unterminated string constant.\",\n    UnterminatedTemplate: \"Unterminated template.\",\n    VarRedeclaration: \"Identifier '%0' has already been declared.\",\n    YieldBindingIdentifier:\n      \"Can not use 'yield' as identifier inside a generator.\",\n    YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n    ZeroDigitNumericSeparator:\n      \"Numeric separator can not be used after leading 0.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n\nexport const SourceTypeModuleErrorMessages = makeErrorTemplates(\n  {\n    ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n    ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  },\n  /* code */ ErrorCodes.SourceTypeModuleError,\n);\n","// @flow\n/* eslint sort-keys: \"error\" */\nimport { getLineInfo, type Position } from \"../util/location\";\nimport CommentsParser from \"./comments\";\nimport { type ErrorCode, ErrorCodes } from \"./error-codes\";\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\ntype ErrorContext = {\n  pos: number,\n  loc: Position,\n  missingPlugin?: Array<string>,\n  code?: string,\n  reasonCode?: String,\n};\nexport type ParsingError = SyntaxError & ErrorContext;\n\nexport type ErrorTemplate = {\n  code: ErrorCode,\n  template: string,\n  reasonCode: string,\n};\nexport type ErrorTemplates = {\n  [key: string]: ErrorTemplate,\n};\n\nexport function makeErrorTemplates(\n  messages: {\n    [key: string]: string,\n  },\n  code: ErrorCode,\n): ErrorTemplates {\n  const templates: ErrorTemplates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode,\n      template: messages[reasonCode],\n    });\n  });\n  return Object.freeze(templates);\n}\n\nexport { ErrorCodes };\nexport {\n  ErrorMessages as Errors,\n  SourceTypeModuleErrorMessages as SourceTypeModuleErrors,\n} from \"./error-message\";\n\nexport type raiseFunction = (number, ErrorTemplate, ...any) => void;\n\nexport default class ParserError extends CommentsParser {\n  // Forward-declaration: defined in tokenizer/index.js\n  /*::\n  +isLookahead: boolean;\n  */\n\n  getLocationForPosition(pos: number): Position {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;\n    else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;\n    else if (pos === this.state.end) loc = this.state.endLoc;\n    else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;\n    else loc = getLineInfo(this.input, pos);\n\n    return loc;\n  }\n\n  raise(\n    pos: number,\n    { code, reasonCode, template }: ErrorTemplate,\n    ...params: any\n  ): Error | empty {\n    return this.raiseWithData(pos, { code, reasonCode }, template, ...params);\n  }\n\n  /**\n   * Raise a parsing error on given position pos. If errorRecovery is true,\n   * it will first search current errors and overwrite the error thrown on the exact\n   * position before with the new error message. If errorRecovery is false, it\n   * fallbacks to `raise`.\n   *\n   * @param {number} pos\n   * @param {string} errorTemplate\n   * @param {...any} params\n   * @returns {(Error | empty)}\n   * @memberof ParserError\n   */\n  raiseOverwrite(\n    pos: number,\n    { code, template }: ErrorTemplate,\n    ...params: any\n  ): Error | empty {\n    const loc = this.getLocationForPosition(pos);\n    const message =\n      template.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n        if (error.pos === pos) {\n          return Object.assign(error, { message });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n    return this._raise({ code, loc, pos }, message);\n  }\n\n  raiseWithData(\n    pos: number,\n    data?: {\n      missingPlugin?: Array<string>,\n      code?: string,\n    },\n    errorTemplate: string,\n    ...params: any\n  ): Error | empty {\n    const loc = this.getLocationForPosition(pos);\n    const message =\n      errorTemplate.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign(({ loc, pos }: Object), data), message);\n  }\n\n  _raise(errorContext: ErrorContext, message: string): Error | empty {\n    // $FlowIgnore\n    const err: SyntaxError & ErrorContext = new SyntaxError(message);\n    Object.assign(err, errorContext);\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n}\n","// @flow\n\nimport { TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parser/error\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseRegExpLiteral({ pattern, flags }): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt;\n      try {\n        // $FlowIgnore\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T: N.Node>(value: any) {\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.extra.expressionValue;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.end,\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(\n        stmt,\n        \"ExpressionStatement\",\n        directive.end,\n        directive.loc.end,\n      );\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return ((method: any): N.EstreeProperty | N.EstreeMethodDefinition).value\n        .params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    stmtToDirective(stmt: N.Statement): N.Directive {\n      const value = stmt.expression.value;\n      const directive = super.stmtToDirective(stmt);\n\n      // Record the expression value as in estree mode we want\n      // the stmt to have the real value e.g. (\"use strict\") and\n      // not the raw value e.g. (\"use\\\\x20strict\")\n      this.addExtra(directive.value, \"expressionValue\", value);\n\n      return directive;\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      ...args: [?boolean, boolean, TokenType, void | (boolean => void)]\n    ): void {\n      super.parseBlockBody(node, ...args);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      // $FlowIgnore - directives isn't optional in the type definition\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parseMaybePrivateName(...args: [boolean]): any {\n      const node = super.parseMaybePrivateName(...args);\n      if (\n        node.type === \"PrivateName\" &&\n        this.getPluginOption(\"estree\", \"classFeatures\")\n      ) {\n        return this.convertPrivateNameToPrivateIdentifier(node);\n      }\n      return node;\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = (node: any);\n      delete node.id;\n      node.name = name;\n      node.type = \"PrivateIdentifier\";\n      return node;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.isPrivateName(node);\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.getPrivateNameSV(node);\n      }\n      return node.name;\n    }\n\n    parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n      const node = super.parseLiteral<T>(value, type);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        // $FlowIgnore\n        node.computed = false;\n      }\n      type = \"MethodDefinition\";\n      return this.finishNode(node, type);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = (super.parseClassProperty(...args): any);\n      if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n        propertyNode.type = \"PropertyDefinition\";\n      }\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = (super.parseClassPrivateProperty(...args): any);\n      if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n        propertyNode.type = \"PropertyDefinition\";\n        propertyNode.computed = false;\n      }\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node != null && this.isObjectProperty(node)) {\n        this.toAssignable(node.value, isLHS);\n\n        return node;\n      }\n\n      return super.toAssignable(node, isLHS);\n    }\n\n    toAssignableObjectExpressionProp(prop: N.Node, ...args) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(prop.key.start, Errors.PatternHasAccessor);\n      } else if (prop.method) {\n        this.raise(prop.key.start, Errors.PatternHasMethod);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, ...args);\n      }\n    }\n\n    finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n      node: T,\n      optional: boolean,\n    ): N.Expression {\n      super.finishCallExpression(node, optional);\n\n      if (node.callee.type === \"Import\") {\n        ((node: N.Node): N.EstreeImportExpression).type = \"ImportExpression\";\n        ((node: N.Node): N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          ((node: N.Node): N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // $FlowIgnore - arguments isn't optional in the type definition\n        delete node.arguments;\n        // $FlowIgnore - callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(node: N.Node) {\n      super.parseExport(node);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            node.type = \"ExportAllDeclaration\";\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n      );\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n  };\n","// @flow\n\n// The token context is used to track whether the apostrophe \"`\"\n// starts or ends a string template\n\nimport { types as tt } from \"./types\";\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nexport const types: {\n  [key: string]: TokContext,\n} = {\n  brace: new TokContext(\"{\"),\n  template: new TokContext(\"`\", true),\n};\n\n// Token-specific context update code\n// Note that we should avoid accessing `this.prodParam` in context update,\n// because it is executed immediately when last token is consumed, which may be\n// before `this.prodParam` is updated. e.g.\n// ```\n// function *g() { () => yield / 2 }\n// ```\n// When `=>` is eaten, the context update of `yield` is executed, however,\n// `this.prodParam` still has `[Yield]` production because it is not yet updated\n\ntt.braceR.updateContext = context => {\n  context.pop();\n};\n\n// we don't need to update context for tt.braceBarL because we do not pop context for tt.braceBarR\n// ideally only dollarBraceL \"${\" needs a non-template context\n// in order to indicate that the last \"`\" in `${`\" starts a new string template\n// inside a template element within outer string template.\n// but when we popped such context in `}`, we lost track of whether this\n// `}` matches a `${` or other tokens matching `}`, so we have to push\n// such context in every token that `}` will match.\ntt.braceL.updateContext =\n  tt.braceHashL.updateContext =\n  tt.dollarBraceL.updateContext =\n    context => {\n      context.push(types.brace);\n    };\n\ntt.backQuote.updateContext = context => {\n  if (context[context.length - 1] === types.template) {\n    context.pop();\n  } else {\n    context.push(types.template);\n  }\n};\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,107,20,28,22,13,52,76,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8952,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42717,35,4148,12,221,3,5761,15,7472,3104,541,1507,4938];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(current: number, next: number): boolean {\n  return current === charCodes.atSign && next === charCodes.atSign;\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b100000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport * as N from \"../types\";\nimport { Errors, type raiseFunction } from \"../parser/error\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  scopeStack: Array<IScope> = [];\n  declare raise: raiseFunction;\n  declare inModule: boolean;\n  undefinedExports: Map<string, number> = new Map();\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction, inModule: boolean) {\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  /*:: +createScope: (flags: ScopeFlags) => IScope; */\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & SCOPE_FUNCTION ||\n      (!this.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    pos: number,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, Errors.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","// @flow\n\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { types as tt, type TokenType } from \"./types\";\nimport type { ParsingError, ErrorTemplate } from \"../parser/error\";\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init(options: Options): void {\n    this.strict =\n      options.strictMode === false\n        ? false\n        : options.strictMode === true\n        ? true\n        : options.sourceType === \"module\";\n\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  errors: ParsingError[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  inPropertyName: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n  lineStart: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n  lastTokEnd: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  exprAllowed: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, ErrorTemplate> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number,\n  value: any,\n  type: TokenType,\n  start: number,\n  end: number,\n  /* Used only in readToken_mult_modulo */\n  inType: boolean,\n};\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport { types as tt, keywords as keywordTypes, type TokenType } from \"./types\";\nimport { type TokContext, types as ct } from \"./context\";\nimport ParserErrors, { Errors, type ErrorTemplate } from \"../parser/error\";\nimport { SourceLocation } from \"../util/location\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState } from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ],\n  hex: [\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ],\n};\n\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [\n  // 0 - 1\n  charCodes.digit0,\n  charCodes.digit1,\n];\nallowedNumericSeparatorSiblings.oct = [\n  // 0 - 7\n  ...allowedNumericSeparatorSiblings.bin,\n\n  charCodes.digit2,\n  charCodes.digit3,\n  charCodes.digit4,\n  charCodes.digit5,\n  charCodes.digit6,\n  charCodes.digit7,\n];\nallowedNumericSeparatorSiblings.dec = [\n  // 0 - 9\n  ...allowedNumericSeparatorSiblings.oct,\n\n  charCodes.digit8,\n  charCodes.digit9,\n];\n\nallowedNumericSeparatorSiblings.hex = [\n  // 0 - 9, A - F, a - f,\n  ...allowedNumericSeparatorSiblings.dec,\n\n  charCodes.uppercaseA,\n  charCodes.uppercaseB,\n  charCodes.uppercaseC,\n  charCodes.uppercaseD,\n  charCodes.uppercaseE,\n  charCodes.uppercaseF,\n\n  charCodes.lowercaseA,\n  charCodes.lowercaseB,\n  charCodes.lowercaseC,\n  charCodes.lowercaseD,\n  charCodes.lowercaseE,\n  charCodes.lowercaseF,\n];\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends ParserErrors {\n  // Forward-declarations\n  // parser/util.js\n  /*::\n  +hasPrecedingLineBreak: () => boolean;\n  +unexpected: (pos?: ?number, messageOrType?: ErrorTemplate | TokenType) => empty;\n  +expectPlugin: (name: string, pos?: ?number) => true;\n  */\n\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // TODO\n\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   *\n   * @param {State} state\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      lastTokEnd: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   *\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // For performance we use a simpified tokenizer state structure\n    // $FlowIgnore\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach((message, pos) =>\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        this.raise(pos, message),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    if (curContext === ct.template) {\n      this.readTmplToken();\n    } else {\n      this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n    }\n  }\n\n  skipBlockComment(): N.CommentBlock | void {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) throw this.raise(start, Errors.UnterminatedComment);\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | void {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment();\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.state.endLoc = this.state.curPosition();\n      this.updateContext(prevType);\n    }\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(this.state.pos, Errors.UnexpectedDigitAfterHash);\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(\n          this.state.pos,\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator **\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            this.state.pos,\n            Errors.RecordExpressionBarIncorrectEndSyntaxType,\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            this.state.pos,\n            Errors.TupleExpressionBarIncorrectEndSyntaxType,\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    // '^'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code: number): void {\n    // '<>'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size =\n        code === charCodes.greaterThan &&\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.greaterThan\n          ? 3\n          : 2;\n      if (this.input.charCodeAt(this.state.pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShift, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      size = 2;\n    }\n\n    this.finishOp(tt.relational, size);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              this.state.pos,\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              this.state.pos,\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        ++this.state.pos;\n        this.finishToken(tt.backQuote);\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n      case charCodes.greaterThan:\n        this.readToken_lt_gt(code);\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        ++this.state.pos;\n        this.finishToken(tt.at);\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(\n      this.state.pos,\n      Errors.InvalidOrUnexpectedToken,\n      String.fromCodePoint(code),\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (mods.includes(char)) {\n          this.raise(pos + 1, Errors.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(pos + 1, Errors.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings =\n      radix === 16\n        ? allowedNumericSeparatorSiblings.hex\n        : radix === 10\n        ? allowedNumericSeparatorSiblings.dec\n        : radix === 8\n        ? allowedNumericSeparatorSiblings.oct\n        : allowedNumericSeparatorSiblings.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === charCodes.underscore) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n        } else if (\n          forbiddenSiblings.indexOf(prev) > -1 ||\n          forbiddenSiblings.indexOf(next) > -1 ||\n          Number.isNaN(next)\n        ) {\n          this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, Errors.NumericSeparatorInEscapeSequence);\n        }\n\n        // Ignore this _ character\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, Errors.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const start = this.state.pos;\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(this.state.start + 2, Errors.InvalidDigit, radix);\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(start, Errors.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, Errors.InvalidNumber);\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(start, Errors.StrictOctalLiteral);\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, Errors.ZeroDigitNumericSeparator);\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(start, Errors.InvalidOrMissingExponent);\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, Errors.InvalidBigIntLiteral);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, Errors.InvalidDecimal);\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, Errors.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads template string tokens.\n\n  readTmplToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedTemplate);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (\n        ch === charCodes.graveAccent ||\n        (ch === charCodes.dollarSign &&\n          this.input.charCodeAt(this.state.pos + 1) ===\n            charCodes.leftCurlyBrace)\n      ) {\n        if (this.state.pos === this.state.start && this.match(tt.template)) {\n          if (ch === charCodes.dollarSign) {\n            this.state.pos += 2;\n            this.finishToken(tt.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(tt.backQuote);\n            return;\n          }\n        }\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.template, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          // fall through\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(pos: number, message: ErrorTemplate) {\n    if (this.state.strict && !this.state.strictErrors.has(pos)) {\n      this.raise(pos, message);\n    } else {\n      this.state.strictErrors.set(pos, message);\n    }\n  }\n\n  // Used to read escaped characters\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      // fall through\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      // fall through\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(\n            this.state.pos - 1,\n            Errors.StrictNumericEscape,\n          );\n        }\n      // fall through\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          const codePos = this.state.pos - 1;\n          const match = this.input\n            .substr(this.state.pos - 1, 3)\n            .match(/^[0-7]+/);\n\n          // This is never null, because of the if condition above.\n          /*:: invariant(match !== null) */\n          let octalStr = match[0];\n\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(codePos, Errors.StrictNumericEscape);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, Errors.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode: number | void): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(this.state.pos, Errors.MissingUnicodeEscape);\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, Errors.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode: number | void): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word) || tt.name;\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes(): void {\n    const kw = this.state.type.keyword;\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, Errors.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  // the prevType is required by the jsx plugin\n  // eslint-disable-next-line no-unused-vars\n  updateContext(prevType: TokenType): void {\n    this.state.type.updateContext?.(this.state.context);\n  }\n}\n","// @flow\n\nimport {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Errors, type raiseFunction } from \"../parser/error\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, number> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  stack: Array<ClassScope> = [];\n  declare raise: raiseFunction;\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    pos: number,\n  ) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, Errors.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, pos: number) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      // top-level\n      this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n    }\n  }\n}\n","// @flow\n\nimport type { ErrorTemplate, raiseFunction } from \"../parser/error\";\n\n/*:: declare var invariant; */\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n   e.g. we don't know if `async({ x })` is a call expression or an async arrow\n   function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser/error-message) will be recorded in\nsome expression scopes and thrown later when we know what the ambigous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  errors: Map</* pos */ number, /* message */ ErrorTemplate> = new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(pos: number, template: ErrorTemplate) {\n    this.errors.set(pos, template);\n  }\n  clearDeclarationError(pos: number) {\n    this.errors.delete(pos);\n  }\n  iterateErrors(iterator: (template: ErrorTemplate, pos: number) => void) {\n    this.errors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n  declare raise: raiseFunction;\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   * @param {number} pos Error position\n   * @param {ErrorTemplate} template Error template\n   * @memberof ExpressionScopeHandler\n   */\n  recordParameterInitializerError(pos: number, template: ErrorTemplate): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(pos, template);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    this.raise(pos, template);\n  }\n\n  /**\n   * Record parenthesized identifier errors\n   *\n   * A parenthesized identifier in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @returns {void}\n   * @memberof ExpressionScopeHandler\n   */\n  recordParenthesizedIdentifierError(\n    pos: number,\n    template: ErrorTemplate,\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(pos, template);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n      scope.recordDeclarationError(pos, template);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @memberof ExpressionScopeHandler\n   */\n  recordAsyncArrowParametersError(pos: number, template: ErrorTemplate): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(pos, template);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    /*:: invariant(currentScope instanceof ArrowHeadParsingScope) */\n    currentScope.iterateErrors((template, pos) => {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(pos, template);\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","// @flow\nexport const PARAM = 0b0000, // Initial Parameter flags\n  PARAM_YIELD = 0b0001, // track [Yield] production parameter\n  PARAM_AWAIT = 0b0010, // track [Await] production parameter\n  PARAM_RETURN = 0b0100, // track [Return] production parameter\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind =\n  | typeof PARAM\n  | typeof PARAM_AWAIT\n  | typeof PARAM_IN\n  | typeof PARAM_RETURN\n  | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","// @flow\n\nimport { types as tt, TokenType } from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport { Errors, type ErrorTemplate, ErrorCodes } from \"./error\";\nimport type { ParsingError } from \"./error\";\n/*::\nimport type ScopeHandler from \"../util/scope\";\n*/\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  /*::\n  +getScopeHandler: () => Class<ScopeHandler<*>>;\n  */\n\n  // TODO\n\n  addExtra(node: Node, key: string, val: any): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    extra[key] = val;\n  }\n\n  // TODO\n\n  isRelational(op: \"<\" | \">\"): boolean {\n    return this.match(tt.relational) && this.state.value === op;\n  }\n\n  // TODO\n\n  expectRelational(op: \"<\" | \">\"): void {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, tt.relational);\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(name: string): boolean {\n    return (\n      this.match(tt.name) &&\n      this.state.value === name &&\n      !this.state.containsEsc\n    );\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(name: string): boolean {\n    return this.isContextual(name) && this.eat(tt.name);\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(name: string, template?: ErrorTemplate): void {\n    if (!this.eatContextual(name)) this.unexpected(null, template);\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEnd, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(this.state.lastTokEnd, Errors.MissingSemicolon);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, pos?: ?number): void {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  // Throws if the current token and the prev one are separated by a space.\n  assertNoSpace(message: string = \"Unexpected space.\"): void {\n    if (this.state.start > this.state.lastTokEnd) {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(this.state.lastTokEnd, {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedSpace\",\n        template: message,\n      });\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    }\n  }\n\n  // Raise an unexpected token error. Can take the expected token type\n  // instead of a message string.\n\n  unexpected(\n    pos: ?number,\n    messageOrType: ErrorTemplate | TokenType = {\n      code: ErrorCodes.SyntaxError,\n      reasonCode: \"UnexpectedToken\",\n      template: \"Unexpected token\",\n    },\n  ): empty {\n    if (messageOrType instanceof TokenType) {\n      messageOrType = {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template: `Unexpected token, expected \"${messageOrType.label}\"`,\n      };\n    }\n\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n    /* eslint-enable @babel/development-internal/dry-error-messages */\n  }\n\n  expectPlugin(name: string, pos?: ?number): true {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: [name] },\n        `This experimental syntax requires enabling the parser plugin: '${name}'`,\n      );\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names: Array<string>, pos?: ?number): void {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: names },\n        `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\n          \", \",\n        )}'`,\n      );\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParsingError, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: ParsingError),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ?ExpressionErrors,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const { shorthandAssign, doubleProto, optionalParameters } =\n      refExpressionErrors;\n    if (!andThrow) {\n      return (\n        shorthandAssign >= 0 || doubleProto >= 0 || optionalParameters >= 0\n      );\n    }\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, Errors.DuplicateProto);\n    }\n    if (optionalParameters >= 0) {\n      this.unexpected(optionalParameters);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return (\n      this.match(tt.name) ||\n      !!this.state.type.keyword ||\n      this.match(tt.string) ||\n      this.match(tt.num) ||\n      this.match(tt.bigint) ||\n      this.match(tt.decimal)\n    );\n  }\n\n  /*\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /*\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/proposal-class-fields/#sec-private-names-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /*\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(node: Node): boolean {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssign**: track initializer `=` position\n * - **doubleProto**: track the duplicate `__proto__` key position\n * - **optionalParameters**: track the optional paramter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssign = -1;\n  doubleProto = -1;\n  optionalParameters = -1;\n}\n","// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: { [key: string]: any };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // $FlowIgnore\n  NodePrototype.__clone = function (): Node {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = \"StringLiteral\";\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(\n      node,\n      type,\n      this.state.lastTokEnd,\n      this.state.lastTokEndLoc,\n    );\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(\n    node: T,\n    type: string,\n    pos: number,\n    loc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    end?: number = this.state.lastTokEnd,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type Parser from \"../../parser\";\nimport { types as tt, type TokenType } from \"../../tokenizer/types\";\nimport * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart, isKeyword } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  type BindingTypes,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { Errors, makeErrorTemplates, ErrorCodes } from \"../../parser/error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = makeErrorTemplates(\n  {\n    AmbiguousConditionalArrow:\n      \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n    AmbiguousDeclareModuleKind:\n      \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n    AssignReservedType: \"Cannot overwrite reserved type %0.\",\n    DeclareClassElement:\n      \"The `declare` modifier can only appear on class fields.\",\n    DeclareClassFieldInitializer:\n      \"Initializers are not allowed in fields with the `declare` modifier.\",\n    DuplicateDeclareModuleExports:\n      \"Duplicate `declare module.exports` statement.\",\n    EnumBooleanMemberNotInitialized:\n      \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n    EnumDuplicateMemberName:\n      \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n    EnumInconsistentMemberValues:\n      \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n    EnumInvalidExplicitType:\n      \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n    EnumInvalidExplicitTypeUnknownSupplied:\n      \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n    EnumInvalidMemberInitializerPrimaryType:\n      \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n    EnumInvalidMemberInitializerSymbolType:\n      \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n    EnumInvalidMemberInitializerUnknownType:\n      \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n    EnumInvalidMemberName:\n      \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n    EnumNumberMemberNotInitialized:\n      \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n    EnumStringMemberInconsistentlyInitailized:\n      \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n    GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n    ImportTypeShorthandOnlyInPureImport:\n      \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n    InexactInsideExact:\n      \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n    InexactInsideNonObject:\n      \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n    InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n    InvalidNonTypeImportInDeclareModule:\n      \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n    MissingTypeParamDefault:\n      \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n    NestedDeclareModule:\n      \"`declare module` cannot be used inside another `declare module`.\",\n    NestedFlowComment:\n      \"Cannot have a flow comment inside another flow comment.\",\n    OptionalBindingPattern:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n    SpreadVariance: \"Spread properties cannot have variance.\",\n    ThisParamAnnotationRequired:\n      \"A type annotation is required for the `this` parameter.\",\n    ThisParamBannedInConstructor:\n      \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n    ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n    ThisParamMustBeFirst:\n      \"The `this` parameter must be the first function parameter.\",\n    ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n    TypeBeforeInitializer:\n      \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n    TypeCastInPattern:\n      \"The type cast expression is expected to be wrapped with parenthesis.\",\n    UnexpectedExplicitInexactInObject:\n      \"Explicit inexact syntax must appear at the end of an inexact object.\",\n    UnexpectedReservedType: \"Unexpected reserved type %0.\",\n    UnexpectedReservedUnderscore:\n      \"`_` is only allowed as a type argument to call or new.\",\n    UnexpectedSpaceBetweenModuloChecks:\n      \"Spaces between `%` and `checks` are not allowed here.\",\n    UnexpectedSpreadType:\n      \"Spread operator cannot appear in class or interface definitions.\",\n    UnexpectedSubtractionOperand:\n      'Unexpected token, expected \"number\" or \"bigint\".',\n    UnexpectedTokenAfterTypeParameter:\n      \"Expected an arrow function after this type parameter declaration.\",\n    UnexpectedTypeParameterBeforeAsyncArrowFunction:\n      \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n    UnsupportedDeclareExportKind:\n      \"`declare export %0` is not supported. Use `%1` instead.\",\n    UnsupportedStatementInDeclareModule:\n      \"Only declares and type imports are allowed inside declare module.\",\n    UnterminatedFlowComment: \"Unterminated flow-comment.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state: { type: TokenType, value: any }): boolean {\n  return (\n    (state.type === tt.name || !!state.type.keyword) && state.value !== \"from\"\n  );\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", pos: number, value: N.Node |}\n  | {| type: \"string\", pos: number, value: N.Node |}\n  | {| type: \"boolean\", pos: number, value: N.Node |}\n  | {| type: \"invalid\", pos: number |}\n  | {| type: \"none\", pos: number |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): Class<FlowScopeHandler> {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowType {\n      const node = this.startNode();\n      const moduloPos = this.state.start;\n      this.next(); // eat `%`\n      this.expectContextual(\"checks\");\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloPos + 1) {\n        this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.isRelational(\"<\")) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(\"module\")) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(\"type\")) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(\"opaque\")) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(\"interface\")) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(\"type\") && !this.match(tt._typeof)) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n            );\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            \"declare\",\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.DuplicateDeclareModuleExports,\n            );\n          }\n          if (kind === \"ES\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(\"type\") || this.isContextual(\"interface\")) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n\n          throw this.raise(\n            this.state.start,\n            FlowErrors.UnsupportedDeclareExportKind,\n            label,\n            suggestion,\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(\"opaque\") // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(\"interface\") || // declare export interface ...\n          this.isContextual(\"type\") || // declare export type ...\n          this.isContextual(\"opaque\") // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(\"exports\");\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.start,\n      );\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"mixins\")) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n      }\n    }\n\n    checkReservedType(word: string, startLoc: number, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        startLoc,\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        word,\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(this.state.value, this.state.start, declaration);\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(\"type\");\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStart = this.state.start;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      } while (!this.isRelational(\">\"));\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseType());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(\"interface\");\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStart: ?number = null;\n        let inexactStart: ?number = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(\"proto\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStart = this.state.start;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(\"static\")) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n            const lookahead = this.lookahead();\n            if (\n              lookahead.type === tt.name ||\n              lookahead.type === tt.string ||\n              lookahead.type === tt.num\n            ) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStart,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStart = this.state.lastTokStart;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStart &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            inexactStart,\n            FlowErrors.UnexpectedExplicitInexactInObject,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStart: ?number,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InexactInsideNonObject,\n            );\n          } else if (!allowInexact) {\n            this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n          }\n          if (variance) {\n            this.raise(variance.start, FlowErrors.InexactVariance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n        }\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n        if (variance) {\n          this.raise(variance.start, FlowErrors.SpreadVariance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStart != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(\n              node.value.this.start,\n              FlowErrors.ThisParamBannedInConstructor,\n            );\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const start = property.start;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.value.this.start,\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n        );\n      }\n\n      if (length !== paramCount) {\n        if (property.kind === \"get\") {\n          this.raise(start, Errors.BadGetterArity);\n        } else {\n          this.raise(start, Errors.BadSetterArity);\n        }\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(start, Errors.BadSetterRestParameter);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(node.start, FlowErrors.ThisParamMustBeFirst);\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[],\n      rest: ?N.FlowFunctionTypeParam,\n      _this: ?N.FlowFunctionTypeParam,\n    } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      let _this: ?N.FlowFunctionTypeParam = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.name:\n          if (this.isContextual(\"interface\")) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(\n            startPos,\n            startLoc,\n            node,\n            this.parseIdentifier(),\n          );\n\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.relational:\n          if (this.state.value === \"<\") {\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n            this.expect(tt.parenL);\n            tmp = this.flowParseFunctionTypeParams();\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            node.this = tmp._this;\n            this.expect(tt.parenR);\n\n            this.expect(tt.arrow);\n\n            node.returnType = this.flowParseType();\n\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n          }\n          break;\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (this.match(tt.name) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode<N.BooleanLiteralTypeAnnotation>(\n            node,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(\n              this.state.start,\n              FlowErrors.UnexpectedSubtractionOperand,\n            );\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        default:\n          if (this.state.type.keyword === \"typeof\") {\n            return this.flowParseTypeofType();\n          } else if (this.state.type.keyword) {\n            const label = this.state.type.label;\n            this.next();\n            return super.createIdentifier(node, label);\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (\n        this.state.strict &&\n        this.match(tt.name) &&\n        this.state.value === \"interface\"\n      ) {\n        const lookahead = this.lookahead();\n        if (lookahead.type === tt.name || isKeyword(lookahead.value)) {\n          const node = this.startNode();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatement(context, topLevel);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            this.match(tt.name) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (this.match(tt.name)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      return (\n        this.isContextual(\"type\") ||\n        this.isContextual(\"interface\") ||\n        this.isContextual(\"opaque\") ||\n        (this.shouldParseEnums() && this.isContextual(\"enum\")) ||\n        super.shouldParseExportDeclaration()\n      );\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (\n        this.match(tt.name) &&\n        (this.state.value === \"type\" ||\n          this.state.value === \"interface\" ||\n          this.state.value === \"opaque\" ||\n          (this.shouldParseEnums() && this.state.value === \"enum\"))\n      ) {\n        return false;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        node.extra?.trailingComma,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(\"type\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers();\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(\"opaque\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(\"interface\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(\"type\") && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const pos = this.state.start;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(pos);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const pos = this.state.start;\n      if (this.isContextual(\"declare\")) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(pos, FlowErrors.DeclareClassElement);\n        } else if (member.value) {\n          this.raise(\n            member.value.start,\n            FlowErrors.DeclareClassFieldInitializer,\n          );\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(this.state.pos, Errors.InvalidIdentifier, fullWord);\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(tt.relational, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (isIteratorStart(code, next)) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n      } else {\n        return super.toAssignable(node, isLHS);\n      }\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaPos?: ?number,\n      isLHS: boolean,\n    ): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return super.toAssignableList(exprList, trailingCommaPos, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      ...args:\n        | [string, BindingTypes | void]\n        | [\n            string,\n            BindingTypes | void,\n            ?Set<string>,\n            boolean | void,\n            boolean | void,\n          ]\n    ): void {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(expr, ...args);\n      }\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n        // estree support\n      } else if (\n        // $FlowFixMe flow does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        method.value.params\n      ) {\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);\n        } else if (this.isThisParam(param)) {\n          this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);\n        }\n      }\n    }\n\n    parsePropertyName(\n      node: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n      isPrivateNameAllowed: boolean,\n    ): N.Identifier {\n      const variance = this.flowParseVariance();\n      const key = super.parsePropertyName(node, isPrivateNameAllowed);\n      // $FlowIgnore (\"variance\" not defined on TsNamedTypeElementBase)\n      node.variance = variance;\n      return key;\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.isRelational(\"<\") && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(param.start, FlowErrors.OptionalBindingPattern);\n        }\n        if (this.isThisParam(param)) {\n          this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamNoDefault);\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n      contextDescription: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(\"type\")) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n\n        // import type * is not allowed\n        if (kind === \"type\" && lh.type === tt.star) {\n          this.unexpected(lh.start);\n        }\n\n        if (\n          isMaybeDefaultImport(lh) ||\n          lh.type === tt.braceL ||\n          lh.type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(node: N.ImportDeclaration): void {\n      const specifier = this.startNode();\n      const firstIdentIsString = this.match(tt.string);\n      const firstIdent = this.parseModuleExportName();\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !this.match(tt.name) &&\n          !this.state.type.keyword\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          (this.match(tt.name) || this.state.type.keyword)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (firstIdentIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(\n              specifier.start,\n              Errors.ImportBindingIsString,\n              firstIdent.value,\n            );\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(\"as\")) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const nodeIsTypeImport = hasTypeImportKind(node);\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (nodeIsTypeImport && specifierIsTypeImport) {\n        this.raise(\n          specifier.start,\n          FlowErrors.ImportTypeShorthandOnlyInPureImport,\n        );\n      }\n\n      if (nodeIsTypeImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.start,\n          true,\n          true,\n        );\n      }\n\n      this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ?ExpressionErrors,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.isRelational(\"<\"))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const curContext = context[context.length - 1];\n        if (curContext === tc.j_oTag) {\n          context.length -= 2;\n        } else if (curContext === tc.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (jsx?.error || this.isRelational(\"<\")) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression: ?(\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n        ) = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                typeParameters.start,\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n              );\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          typeParameters.start,\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n        );\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);\n        }\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.isRelational(\"<\")\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (\n        !noCalls &&\n        this.shouldParseTypes() &&\n        this.isRelational(\"<\")\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      let targs = null;\n      if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          this.unexpected(null, FlowErrors.NestedFlowComment);\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", (this.state.pos += 2));\n        if (end === -1) {\n          throw this.raise(this.state.pos - 2, Errors.UnterminatedComment);\n        }\n        this.state.pos = end + 3;\n        return;\n      }\n\n      return super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(this.state.pos, Errors.UnterminatedComment);\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumBooleanMemberNotInitialized,\n        memberName,\n        enumName,\n      );\n    }\n\n    flowEnumErrorInvalidMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n      this.raise(\n        pos,\n        FlowErrors.EnumInvalidMemberName,\n        memberName,\n        suggestion,\n        enumName,\n      );\n    }\n\n    flowEnumErrorDuplicateMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n    }\n\n    flowEnumErrorInconsistentMemberValues(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n    }\n\n    flowEnumErrorInvalidExplicitType(\n      pos: number,\n      {\n        enumName,\n        suppliedType,\n      }: { enumName: string, suppliedType: null | string },\n    ) {\n      return this.raise(\n        pos,\n        suppliedType === null\n          ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied\n          : FlowErrors.EnumInvalidExplicitType,\n        enumName,\n        suppliedType,\n      );\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      pos: number,\n      { enumName, explicitType, memberName }: EnumContext,\n    ) {\n      let message = null;\n      switch (explicitType) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n          message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n          break;\n        case \"symbol\":\n          message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n          break;\n        default:\n          // null\n          message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n      }\n      return this.raise(pos, message, enumName, memberName, explicitType);\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumNumberMemberNotInitialized,\n        enumName,\n        memberName,\n      );\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumStringMemberInconsistentlyInitailized,\n        enumName,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startPos = this.state.start;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        default:\n          return { type: \"invalid\", pos: startPos };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const pos = this.state.start;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", pos };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      pos: number,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(pos, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      members: {|\n        booleanMembers: Array<N.Node>,\n        numberMembers: Array<N.Node>,\n        stringMembers: Array<N.Node>,\n        defaultedMembers: Array<N.Node>,\n      |},\n      hasUnknownMembers: boolean,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.flowEnumErrorInvalidMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.flowEnumErrorDuplicateMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.pos,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.pos,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (this.eatContextual(\"of\")) {\n        if (!this.match(tt.name)) {\n          throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: null,\n          });\n        }\n\n        const { value } = this.state;\n        this.next();\n\n        if (\n          value !== \"boolean\" &&\n          value !== \"number\" &&\n          value !== \"string\" &&\n          value !== \"symbol\"\n        ) {\n          this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: value,\n          });\n        }\n\n        return value;\n      }\n      return null;\n    }\n\n    flowEnumBody(node: N.Node, { enumName, nameLoc }): N.Node {\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, { enumName });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), {\n        enumName: id.name,\n        nameLoc: id.start,\n      });\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.relation(\"<\")\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","// @flow\n\nconst entities: { [name: string]: string } = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n","// @flow\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { TokenType, types as tt } from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, makeErrorTemplates, ErrorCodes } from \"../../parser/error\";\nimport type { LookaheadState } from \"../../tokenizer/state\";\nimport State from \"../../tokenizer/state\";\n\ntype JSXLookaheadState = LookaheadState & { inPropertyName: boolean };\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = makeErrorTemplates(\n  {\n    AttributeIsEmpty:\n      \"JSX attributes must only be assigned a non-empty expression.\",\n    MissingClosingTagElement:\n      \"Expected corresponding JSX closing tag for <%0>.\",\n    MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n    UnexpectedSequenceExpression:\n      \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n    UnsupportedJsxValue:\n      \"JSX value should be either an expression or a quoted JSX text.\",\n    UnterminatedJsxContent: \"Unterminated JSX contents.\",\n    UnwrappedAdjacentJSXElements:\n      \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n/* eslint-disable sort-keys */\n\n// Be aware that this file is always executed and not only when the plugin is enabled.\n// Therefore this contexts and tokens do always exist.\ntc.j_oTag = new TokContext(\"<tag\");\ntc.j_cTag = new TokContext(\"</tag\");\ntc.j_expr = new TokContext(\"<tag>...</tag>\", true);\n\ntt.jsxName = new TokenType(\"jsxName\");\ntt.jsxText = new TokenType(\"jsxText\", { beforeExpr: true });\ntt.jsxTagStart = new TokenType(\"jsxTagStart\", { startsExpr: true });\ntt.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntt.jsxTagStart.updateContext = context => {\n  context.push(\n    tc.j_expr, // treat as beginning of JSX expression\n    tc.j_oTag, // start opening tag context\n  );\n};\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.exprAllowed) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              const htmlEntity =\n                ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\";\n              const char = this.input[this.state.pos];\n              this.raise(this.state.pos, {\n                code: ErrorCodes.SyntaxError,\n                reasonCode: \"UnexpectedToken\",\n                template: `Unexpected token \\`${char}\\`. Did you mean \\`${htmlEntity}\\` or \\`{'${char}'}\\`?`,\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, Errors.UnterminatedString);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      let str = \"\";\n      let count = 0;\n      let entity;\n      let ch = this.input[this.state.pos];\n\n      const startPos = ++this.state.pos;\n      while (this.state.pos < this.length && count++ < 10) {\n        ch = this.input[this.state.pos++];\n        if (ch === \";\") {\n          if (str[0] === \"#\") {\n            if (str[1] === \"x\") {\n              str = str.substr(2);\n              if (HEX_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 16));\n              }\n            } else {\n              str = str.substr(1);\n              if (DECIMAL_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 10));\n              }\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.state.pos = startPos;\n        return \"&\";\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (this.state.type.keyword) {\n        node.name = this.state.type.keyword;\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.next();\n          node = this.jsxParseExpressionContainer(node);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(node.start, JsxErrors.AttributeIsEmpty);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEnd,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(\n        node,\n        \"JSXEmptyExpression\",\n        this.state.start,\n        this.state.startLoc,\n      );\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(\n              expression.expressions[1].start,\n              JsxErrors.UnexpectedSequenceExpression,\n            );\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.eat(tt.braceL)) {\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (isFragment(openingElement) && !isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagFragment,\n          );\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagElement,\n            getQualifiedJSXName(openingElement.name),\n          );\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(\n              // $FlowIgnore\n              closingElement.start,\n              JsxErrors.MissingClosingTagElement,\n              getQualifiedJSXName(openingElement.name),\n            );\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.isRelational(\"<\")) {\n        throw this.raise(\n          this.state.start,\n          JsxErrors.UnwrappedAdjacentJSXElements,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.isRelational(\"<\") &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.finishToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    createLookaheadState(state: State): JSXLookaheadState {\n      const lookaheadState = ((super.createLookaheadState(\n        state,\n      ): any): JSXLookaheadState);\n      lookaheadState.inPropertyName = state.inPropertyName;\n      return lookaheadState;\n    }\n\n    getTokenFromCode(code: number): void {\n      if (this.state.inPropertyName) return super.getTokenFromCode(code);\n\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.exprAllowed &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      super.updateContext(prevType);\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.exprAllowed = false;\n      } else if (type === tt.jsxTagEnd) {\n        const out = context.pop();\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.exprAllowed = context[context.length - 1] === tc.j_expr;\n        } else {\n          this.state.exprAllowed = true;\n        }\n      } else if (\n        type.keyword &&\n        (prevType === tt.dot || prevType === tt.questionDot)\n      ) {\n        this.state.exprAllowed = false;\n      } else {\n        this.state.exprAllowed = type.beforeExpr;\n      }\n    }\n  };\n","// @flow\n\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const topLevelScope = this.scopeStack[0];\n    const { name } = id;\n    if (\n      !topLevelScope.types.has(name) &&\n      !topLevelScope.exportOnlyBindings.has(name)\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type { TokenType } from \"../../tokenizer/types\";\nimport type State from \"../../tokenizer/state\";\nimport { types as tt } from \"../../tokenizer/types\";\nimport { types as ct } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport {\n  Errors,\n  makeErrorTemplates,\n  type ErrorTemplate,\n  ErrorCodes,\n} from \"../../parser/error\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility;\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = makeErrorTemplates(\n  {\n    AbstractMethodHasImplementation:\n      \"Method '%0' cannot have an implementation because it is marked abstract.\",\n    AbstractPropertyHasInitializer:\n      \"Property '%0' cannot have an initializer because it is marked abstract.\",\n    AccesorCannotDeclareThisParameter:\n      \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n    AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n    ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n    ClassMethodHasReadonly:\n      \"Class methods cannot have the 'readonly' modifier.\",\n    ConstructorHasTypeParameters:\n      \"Type parameters cannot appear on a constructor declaration.\",\n    DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n    DeclareClassFieldHasInitializer:\n      \"Initializers are not allowed in ambient contexts.\",\n    DeclareFunctionHasImplementation:\n      \"An implementation cannot be declared in ambient contexts.\",\n    DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n    DuplicateModifier: \"Duplicate modifier: '%0'.\",\n    EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n    EmptyTypeArguments: \"Type argument list cannot be empty.\",\n    EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n    ExpectedAmbientAfterExportDeclare:\n      \"'export declare' must be followed by an ambient declaration.\",\n    ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n    IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n    IndexSignatureHasAbstract:\n      \"Index signatures cannot have the 'abstract' modifier.\",\n    IndexSignatureHasAccessibility:\n      \"Index signatures cannot have an accessibility modifier ('%0').\",\n    IndexSignatureHasDeclare:\n      \"Index signatures cannot have the 'declare' modifier.\",\n    IndexSignatureHasOverride:\n      \"'override' modifier cannot appear on an index signature.\",\n    IndexSignatureHasStatic:\n      \"Index signatures cannot have the 'static' modifier.\",\n    InvalidModifierOnTypeMember:\n      \"'%0' modifier cannot appear on a type member.\",\n    InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n    InvalidTupleMemberLabel:\n      \"Tuple members must be labeled with a simple identifier.\",\n    MissingInterfaceName:\n      \"'interface' declarations must be followed by an identifier.\",\n    MixedLabeledAndUnlabeledElements:\n      \"Tuple members must all have names or all not have names.\",\n    NonAbstractClassHasAbstractMethod:\n      \"Abstract methods can only appear within an abstract class.\",\n    NonClassMethodPropertyHasAbstractModifer:\n      \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n    OptionalTypeBeforeRequired:\n      \"A required element cannot follow an optional element.\",\n    OverrideNotInSubClass:\n      \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n    PatternIsOptional:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    PrivateElementHasAbstract:\n      \"Private elements cannot have the 'abstract' modifier.\",\n    PrivateElementHasAccessibility:\n      \"Private elements cannot have an accessibility modifier ('%0').\",\n    ReadonlyForMethodSignature:\n      \"'readonly' modifier can only appear on a property declaration or index signature.\",\n    SetAccesorCannotHaveOptionalParameter:\n      \"A 'set' accessor cannot have an optional parameter.\",\n    SetAccesorCannotHaveRestParameter:\n      \"A 'set' accessor cannot have rest parameter.\",\n    SetAccesorCannotHaveReturnType:\n      \"A 'set' accessor cannot have a return type annotation.\",\n    StaticBlockCannotHaveModifier:\n      \"Static class blocks cannot have any modifier.\",\n    TypeAnnotationAfterAssign:\n      \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n    TypeImportCannotSpecifyDefaultAndNamed:\n      \"A type-only import can specify a default import or named bindings, but not both.\",\n    UnexpectedParameterModifier:\n      \"A parameter property is only allowed in a constructor implementation.\",\n    UnexpectedReadonly:\n      \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n    UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n    UnexpectedTypeCastInParameter:\n      \"Unexpected type cast in parameter position.\",\n    UnsupportedImportTypeArgument:\n      \"Argument in a type import must be a string literal.\",\n    UnsupportedParameterPropertyKind:\n      \"A parameter property may not be declared using a binding pattern.\",\n    UnsupportedSignatureParameterKind:\n      \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): boolean %checks {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return this.match(tt.name);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(allowedModifiers: T[]): ?T {\n      if (!this.match(tt.name)) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (\n        allowedModifiers.indexOf(modifier) !== -1 &&\n        this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))\n      ) {\n        return modifier;\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers(node, [\"public\"]);\n     *    this.tsParseModifiers(node, [\"abstract\", \"readonly\"]);\n     */\n    tsParseModifiers(\n      modified: {\n        [key: TsModifier]: ?true,\n        accessibility?: N.Accessibility,\n      },\n      allowedModifiers: TsModifier[],\n      disallowedModifiers?: TsModifier[],\n      errorTemplate?: ErrorTemplate,\n    ): void {\n      const enforceOrder = (pos, modifier, before, after) => {\n        if (modifier === before && modified[after]) {\n          this.raise(pos, TSErrors.InvalidModifiersOrder, before, after);\n        }\n      };\n      const incompatible = (pos, modifier, mod1, mod2) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);\n        }\n      };\n\n      for (;;) {\n        const startPos = this.state.start;\n        const modifier: ?TsModifier = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);\n          } else {\n            enforceOrder(startPos, modifier, modifier, \"override\");\n            enforceOrder(startPos, modifier, modifier, \"static\");\n            enforceOrder(startPos, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n          } else {\n            enforceOrder(startPos, modifier, \"static\", \"readonly\");\n            enforceOrder(startPos, modifier, \"static\", \"override\");\n            enforceOrder(startPos, modifier, \"override\", \"readonly\");\n            enforceOrder(startPos, modifier, \"abstract\", \"override\");\n\n            incompatible(startPos, modifier, \"declare\", \"override\");\n            incompatible(startPos, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(\n            startPos,\n            // $FlowIgnore\n            errorTemplate,\n            modifier,\n          );\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.isRelational(\">\");\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n    ): ?(T[]) {\n      const result = [];\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expectRelational(\"<\");\n        }\n      }\n\n      const result = this.tsParseDelimitedList(kind, parseElement);\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expectRelational(\">\");\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        node.qualifier = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier();\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(): ?N.TsTypeParameterDeclaration {\n      if (this.isRelational(\"<\")) {\n        return this.tsParseTypeParameters();\n      }\n    }\n\n    tsParseTypeParameters() {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n      );\n      if (node.params.length === 0) {\n        this.raise(node.start, TSErrors.EmptyTypeParameters);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type === tt._const) {\n        this.next();\n        return this.tsParseTypeReference();\n      }\n      return null;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature.parameters = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature.typeAnnotation =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature.typeAnnotation =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(\n              pattern.start,\n              TSErrors.UnsupportedSignatureParameterKind,\n              pattern.type,\n            );\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      return this.eat(tt.name) && this.match(tt.colon);\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n        if (readonly) {\n          this.raise(node.start, TSErrors.ReadonlyForMethodSignature);\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.isRelational(\"<\")) {\n          this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        if (method.kind === \"get\") {\n          if (method.parameters.length > 0) {\n            this.raise(this.state.pos, Errors.BadGetterArity);\n            if (this.isThisParam(method.parameters[0])) {\n              this.raise(\n                this.state.pos,\n                TSErrors.AccesorCannotDeclareThisParameter,\n              );\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method.parameters.length !== 1) {\n            this.raise(this.state.pos, Errors.BadSetterArity);\n          } else {\n            const firstParameter = method.parameters[0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(\n                this.state.pos,\n                TSErrors.AccesorCannotDeclareThisParameter,\n              );\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(\n                this.state.pos,\n                TSErrors.SetAccesorCannotHaveOptionalParameter,\n              );\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(\n                this.state.pos,\n                TSErrors.SetAccesorCannotHaveRestParameter,\n              );\n            }\n          }\n          if (method.typeAnnotation) {\n            this.raise(\n              method.typeAnnotation.start,\n              TSErrors.SetAccesorCannotHaveReturnType,\n            );\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        node,\n        [\"readonly\"],\n        [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n        TSErrors.InvalidModifierOnTypeMember,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      this.parsePropertyName(node, /* isPrivateNameAllowed */ false);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        this.parsePropertyName(node, /* isPrivateNameAllowed */ false);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(\"readonly\");\n      }\n      if (this.isContextual(\"readonly\")) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(\"readonly\");\n      } else if (this.eatContextual(\"readonly\")) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(\"as\") ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements = null;\n      node.elementTypes.forEach(elementNode => {\n        let { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n        }\n\n        // Flow doesn't support ||=\n        seenOptionalElement =\n          seenOptionalElement ||\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          type = elementNode.type;\n        }\n\n        const isLabeled = type === \"TSNamedTupleMember\";\n        // Flow doesn't support ??=\n        labeledElements = labeledElements ?? isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(\n            elementNode.start,\n            TSErrors.MixedLabeledAndUnlabeledElements,\n          );\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { start: startPos, startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode: N.TsNamedTupleMember = this.startNodeAtNode(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = (type.typeName: N.Identifier);\n        } else {\n          this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n          // This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          // $FlowIgnore\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode: N.TsRestType = this.startNodeAt(startPos, startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        // $FlowIgnore\n        node.abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsFillSignature(tt.arrow, node);\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = this.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.name:\n        case tt._void:\n        case tt._null: {\n          const type = this.match(tt._void)\n            ? \"TSVoidKeyword\"\n            : this.match(tt._null)\n            ? \"TSNullKeyword\"\n            : keywordTypeFromName(this.state.value);\n          if (\n            type !== undefined &&\n            this.lookaheadCharCode() !== charCodes.dot\n          ) {\n            const node: N.TsKeywordType = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n          return this.tsParseTypeReference();\n        }\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startPos = this.state.start;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startPos);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.backQuote:\n          return this.tsParseTemplateLiteralType();\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(\n      operator: \"keyof\" | \"unique\" | \"readonly\",\n    ): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      this.expectContextual(operator);\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(node.start, TSErrors.UnexpectedReadonly);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(\"infer\");\n      const typeParameter = this.startNode();\n      typeParameter.name = this.tsParseTypeParameterName();\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw =>\n        this.isContextual(kw),\n      );\n      return operator\n        ? this.tsParseTypeOperator(operator)\n        : this.isContextual(\"infer\")\n        ? this.tsParseInferType()\n        : this.tsParseArrayTypeOrHigher();\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node: N.TsUnionType | N.TsIntersectionType = this.startNode();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.isRelational(\"<\")) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (this.match(tt.name) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.braceL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.braceR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      if (this.match(tt.bracketL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.bracketL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.bracketR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            (node: N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node: N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (\n        !this.match(tt.name) ||\n        this.state.value !== \"asserts\" ||\n        this.hasPrecedingLineBreak()\n      ) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!this.match(tt.name) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          this.state.lastTokStart,\n          Errors.InvalidEscapedReservedWord,\n          \"asserts\",\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n      if (this.hasPrecedingLineBreak() || !this.eat(tt._extends)) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n      node.extendsType = this.tsParseNonConditionalType();\n      this.expect(tt.question);\n      node.trueType = this.tsParseType();\n      this.expect(tt.colon);\n      node.falseType = this.tsParseType();\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return this.isContextual(\"abstract\") && this.lookahead().type === tt._new;\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expectRelational(\">\");\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      descriptor: string,\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStart = this.state.start;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        this.tsParseExpressionWithTypeArguments.bind(this),\n      );\n\n      if (!delimitedList.length) {\n        this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n      }\n\n      return delimitedList;\n    }\n\n    tsParseExpressionWithTypeArguments(): N.TsExpressionWithTypeArguments {\n      const node: N.TsExpressionWithTypeArguments = this.startNode();\n      // Note: TS uses parseLeftHandSideExpressionOrHigher,\n      // then has grammar errors later if it's not an EntityName.\n      node.expression = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n    ): N.TsInterfaceDeclaration {\n      if (this.match(tt.name)) {\n        node.id = this.parseIdentifier();\n        this.checkLVal(\n          node.id,\n          \"typescript interface declaration\",\n          BIND_TS_INTERFACE,\n        );\n      } else {\n        node.id = null;\n        this.raise(this.state.start, TSErrors.MissingInterfaceName);\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      node.typeAnnotation = this.tsInType(() => {\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(\"intrinsic\") &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node: N.TsKeywordType = this.startNode();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      isConst: boolean,\n    ): N.TsEnumDeclaration {\n      if (isConst) node.const = true;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        \"typescript enum declaration\",\n        isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkLVal(\n          node.id,\n          \"module or namespace declaration\",\n          BIND_TS_NAMESPACE,\n        );\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(\"global\")) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(\"require\") &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(\"require\");\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(\"let\")) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      return this.tsInAmbientContext(() => {\n        switch (starttype) {\n          case tt._function:\n            nany.declare = true;\n            return this.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* declarationPosition */ true,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to now how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._const:\n            if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n              // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n              this.expect(tt._const);\n              this.expectContextual(\"enum\");\n              return this.tsParseEnumDeclaration(nany, /* isConst */ true);\n            }\n          // falls through\n          case tt._var:\n            kind = kind || this.state.value;\n            return this.parseVarStatement(nany, kind);\n          case tt.name: {\n            const value = this.state.value;\n            if (value === \"global\") {\n              return this.tsParseAmbientExternalModuleDeclaration(nany);\n            } else {\n              return this.tsParseDeclaration(nany, value, /* next */ true);\n            }\n          }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || this.match(tt.name))\n          ) {\n            return this.tsParseAbstractDeclaration(node);\n          }\n          break;\n\n        case \"enum\":\n          if (next || this.match(tt.name)) {\n            if (next) this.next();\n            return this.tsParseEnumDeclaration(node, /* isConst */ false);\n          }\n          break;\n\n        case \"interface\":\n          if (this.tsCheckLineTerminator(next) && this.match(tt.name)) {\n            return this.tsParseInterfaceDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (this.match(tt.name)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (this.tsCheckLineTerminator(next) && this.match(tt.name)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (this.tsCheckLineTerminator(next) && this.match(tt.name)) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.isRelational(\"<\")) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expectRelational(\"<\");\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(node.start, TSErrors.EmptyTypeArguments);\n      }\n      this.expectRelational(\">\");\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      if (this.match(tt.name)) {\n        switch (this.state.value) {\n          case \"abstract\":\n          case \"declare\":\n          case \"enum\":\n          case \"interface\":\n          case \"module\":\n          case \"namespace\":\n          case \"type\":\n            return true;\n        }\n      }\n\n      return false;\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified = {};\n        this.tsParseModifiers(modified, [\n          \"public\",\n          \"private\",\n          \"protected\",\n          \"override\",\n          \"readonly\",\n        ]);\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n        if (\n          // $FlowIgnore\n          node.declare\n        ) {\n          super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n          return;\n        }\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: $ReadOnlyArray<?N.Expression>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(\n            node.typeAnnotation.start,\n            TSErrors.UnexpectedTypeAnnotation,\n          );\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(...args): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(...args);\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.exprAllowed = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      if (this.isRelational(\"<\")) {\n        let missingParenErrorPos;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n\n          const typeArguments = this.tsParseTypeArguments();\n\n          if (typeArguments) {\n            if (isOptionalCall && !this.match(tt.parenL)) {\n              missingParenErrorPos = this.state.pos;\n              this.unexpected();\n            }\n\n            if (!noCalls && this.eat(tt.parenL)) {\n              // possibleAsync always false here, because we would have handled it above.\n              // $FlowIgnore (won't be any undefined arguments)\n              node.arguments = this.parseCallExpressionArguments(\n                tt.parenR,\n                /* possibleAsync */ false,\n              );\n\n              // Handles invalid case: `f<T>(a:b)`\n              this.tsCheckForInvalidTypeCasts(node.arguments);\n\n              node.typeParameters = typeArguments;\n              if (state.optionalChainMember) {\n                // $FlowIgnore\n                node.optional = isOptionalCall;\n              }\n\n              return this.finishCallExpression(node, state.optionalChainMember);\n            } else if (this.match(tt.backQuote)) {\n              const result = this.parseTaggedTemplateExpression(\n                base,\n                startPos,\n                startLoc,\n                state,\n              );\n              result.typeParameters = typeArguments;\n              return result;\n            }\n          }\n\n          this.unexpected();\n        });\n\n        if (missingParenErrorPos) {\n          this.unexpected(missingParenErrorPos, tt.parenL);\n        }\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      if (this.isRelational(\"<\")) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.\n        const typeParameters = this.tsTryParseAndCatch(() => {\n          const args = this.tsParseTypeArguments();\n          if (!this.match(tt.parenL)) this.unexpected();\n          return args;\n        });\n        if (typeParameters) {\n          node.typeParameters = typeParameters;\n        }\n      }\n\n      super.parseNewArguments(node);\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n    ) {\n      if (\n        nonNull(tt._in.binop) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(\"as\")\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string, // eslint-disable-line no-unused-vars\n      startLoc: number, // eslint-disable-line no-unused-vars\n      checkKeywords: boolean, // eslint-disable-line no-unused-vars\n      // eslint-disable-next-line no-unused-vars\n      isBinding: boolean,\n    ): void {\n      // Don't bother checking for TypeScript code.\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      node.importKind = \"value\";\n      if (this.match(tt.name) || this.match(tt.star) || this.match(tt.braceL)) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(\"type\") &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          !(ahead.type === tt.name && ahead.value === \"from\") &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (this.match(tt.name) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(node);\n        }\n      }\n\n      const importNode = super.parseImport(node);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        importNode.specifiers.length > 1 &&\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(\n          importNode.start,\n          TSErrors.TypeImportCannotSpecifyDefaultAndNamed,\n        );\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(\"type\") &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(\"as\")) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(\"namespace\");\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (this.isContextual(\"type\") && this.lookahead().type === tt.braceL) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(\"abstract\") && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        this.parseClass(cls, true, true);\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.state.value === \"interface\") {\n        const interfaceNode = this.startNode();\n        this.next();\n        const result = this.tsParseInterfaceDeclaration(interfaceNode);\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.state.type === tt._const) {\n        const ahead = this.lookahead();\n        if (ahead.type === tt.name && ahead.value === \"enum\") {\n          const node: N.TsEnumDeclaration = this.startNode();\n          this.expect(tt._const);\n          this.expectContextual(\"enum\");\n          return this.tsParseEnumDeclaration(node, /* isConst */ true);\n        }\n      }\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const invalidModifersForStaticBlocks = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n      ];\n      this.tsParseModifiers(\n        member,\n        invalidModifersForStaticBlocks.concat([\"static\"]),\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        const isStatic = !!member.static;\n        if (isStatic && this.eat(tt.braceL)) {\n          if (this.tsHasSomeModifiers(member, invalidModifersForStaticBlocks)) {\n            this.raise(this.state.pos, TSErrors.StaticBlockCannotHaveModifier);\n          }\n          this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        } else {\n          this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member: any).abstract) {\n          this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n        }\n        if ((member: any).accessibility) {\n          this.raise(\n            member.start,\n            TSErrors.IndexSignatureHasAccessibility,\n            (member: any).accessibility,\n          );\n        }\n        if ((member: any).declare) {\n          this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n        }\n        if ((member: any).override) {\n          this.raise(member.start, TSErrors.IndexSignatureHasOverride);\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member: any).abstract) {\n        this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);\n      }\n\n      if ((member: any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(member.start, TSErrors.OverrideNotInSubClass);\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          startPos,\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      // \"export declare\" is equivalent to just \"export\".\n      const isDeclare = this.eatContextual(\"declare\");\n\n      if (\n        isDeclare &&\n        (this.isContextual(\"declare\") || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(\n          this.state.start,\n          TSErrors.ExpectedAmbientAfterExportDeclare,\n        );\n      }\n\n      let declaration: ?N.Declaration;\n\n      if (this.match(tt.name)) {\n        declaration = this.tsTryParseExportDeclaration();\n      }\n      if (!declaration) {\n        declaration = super.parseExportDeclaration(node);\n      }\n      if (\n        declaration &&\n        (declaration.type === \"TSInterfaceDeclaration\" ||\n          declaration.type === \"TSTypeAliasDeclaration\" ||\n          isDeclare)\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (declaration && isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (this.state.isAmbientContext && this.match(tt.eq)) {\n        this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(\n          this.state.start,\n          TSErrors.AbstractPropertyHasInitializer,\n          key.type === \"Identifier\" && !node.computed\n            ? key.name\n            : `[${this.input.slice(key.start, key.end)}]`,\n        );\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(\n          node.start,\n          TSErrors.PrivateElementHasAccessibility,\n          node.accessibility,\n        );\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n      }\n\n      // $FlowIgnore\n      if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n        this.raise(method.start, TSErrors.DeclareAccessor, method.kind);\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.tsParseTypeArguments();\n      }\n      if (this.eatContextual(\"implements\")) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (decl.id.type === \"Identifier\" && this.eat(tt.bang)) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.isRelational(\"<\"))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        if (context[context.length - 1] === ct.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === ct.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (!jsx?.error && !this.isRelational(\"<\")) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      let typeParameters: N.TsTypeParameterDeclaration;\n      state = state || this.state.clone();\n\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(param.start, TSErrors.PatternIsOptional);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return super.toAssignable(this.typeCastToParameter(node), isLHS);\n        case \"TSParameterProperty\":\n          return super.toAssignable(node, isLHS);\n        case \"ParenthesizedExpression\":\n          return this.toAssignableParenthesizedExpression(node, isLHS);\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean) {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      contextDescription: string,\n      ...args:\n        | [BindingTypes | void]\n        | [BindingTypes | void, ?Set<string>, boolean | void, boolean | void]\n    ): void {\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          // Allow \"typecasts\" to appear on the left of assignment expressions,\n          // because it may be in an arrow function.\n          // e.g. `const f = (foo: number = 0) => foo;`\n          return;\n        case \"TSParameterProperty\":\n          this.checkLVal(expr.parameter, \"parameter property\", ...args);\n          return;\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (\n            /*bindingType*/ !args[0] &&\n            contextDescription !== \"parenthesized expression\" &&\n            !expr.extra?.parenthesized\n          ) {\n            this.raise(expr.start, Errors.InvalidLhs, contextDescription);\n            break;\n          }\n          this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n          return;\n        case \"TSNonNullExpression\":\n          this.checkLVal(expr.expression, contextDescription, ...args);\n          return;\n        default:\n          super.checkLVal(expr, contextDescription, ...args);\n          return;\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(this.state.start, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(close) {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n      } else {\n        super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(\n          node.typeAnnotation.start,\n          TSErrors.TypeAnnotationAfterAssign,\n        );\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(tt.relational, 1);\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      if (this.match(tt.relational)) {\n        const code = this.input.charCodeAt(this.state.start);\n        if (code === charCodes.lessThan || code === charCodes.greaterThan) {\n          this.state.pos -= 1;\n          this.readToken_lt_gt(code);\n        }\n      }\n    }\n\n    toAssignableList(exprList: N.Expression[]): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (!expr) continue;\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            exprList[i] = this.typeCastToParameter(expr);\n            break;\n          case \"TSAsExpression\":\n          case \"TSTypeAssertion\":\n            if (!this.state.maybeInArrowParameters) {\n              exprList[i] = this.typeCastToParameter(expr);\n            } else {\n              this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n            }\n            break;\n        }\n      }\n      return super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArguments(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T: N.Class>(node: T, ...args: any[]): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node: any).abstract;\n      try {\n        return super.parseClass(node, ...args);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | typeof undefined {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.parseClass<N.ClassDeclaration>(\n          (node: N.ClassDeclaration),\n          /* isStatement */ true,\n          /* optionalId */ false,\n        );\n      } else if (this.isContextual(\"interface\")) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(\n            node.start,\n            TSErrors.NonClassMethodPropertyHasAbstractModifer,\n          );\n          this.next();\n          return this.tsParseInterfaceDeclaration(\n            (node: N.TsInterfaceDeclaration),\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod(...args: any[]) {\n      const method = super.parseMethod(...args);\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(\n            method.start,\n            TSErrors.AbstractMethodHasImplementation,\n            key.type === \"Identifier\" && !method.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n          );\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n  };\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport { types as tt, TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\nimport { makeErrorTemplates, ErrorCodes } from \"../parser/error\";\n\ntt.placeholder = new TokenType(\"%%\", { startsExpr: true });\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\nconst PlaceHolderErrors = makeErrorTemplates(\n  {\n    ClassNameIsRequired: \"A class name is required.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    checkLVal(expr: N.Expression): void {\n      if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n        return node;\n      }\n      return super.toAssignable(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    isLet(context: ?string): boolean {\n      if (super.isLet(context)) {\n        return true;\n      }\n\n      // Replicate the original checks that lead to looking ahead for an\n      // identifier.\n      if (!this.isContextual(\"let\")) {\n        return false;\n      }\n      if (context) return false;\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tt.placeholder.label,\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(\"from\");\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n  };\n","import type Parser from \"../parser\";\nimport { types as tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStart = this.state.start;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.eat(tt.modulo);\n        if (this.match(tt.name)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStart);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n","// @flow\n\nimport type Parser from \"./parser\";\n\nexport type Plugin = string | [string, Object];\n\nexport type PluginList = $ReadOnlyArray<Plugin>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\nexport function hasPlugin(plugins: PluginList, name: string): boolean {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash =\n      hasPlugin(plugins, \"recordAndTuple\") &&\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") === \"hash\";\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVerionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // $FlowIgnore\n    error.missingPlugins = \"doExpressions\"; // so @babel/core can provide better error message\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> =\n  Object.keys(mixinPlugins);\n","// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n  attachComment: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Line from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// @flow\n\n/*:: declare var invariant; */\nimport * as charCodes from \"charcodes\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  /*:: Identifier, */\n  /*:: ObjectExpression, */\n  /*:: ObjectPattern, */\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors } from \"./error\";\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  /*::\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssignAllowIn: (\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObjectLike: <T: ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => T;\n  */\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseDecorator: () => Decorator;\n  */\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n\n   - Parenthesized Destructuring patterns\n   - RestElement is not the last element\n   - Missing `=` in assignment pattern\n\n   NOTE: There is a corresponding \"isAssignable\" method.\n   When this one is updated, please check if also that one needs to be updated.\n\n   * @param {Node} node The expression atom\n   * @param {boolean} [isLHS=false] Whether we are parsing a LeftHandSideExpression. If isLHS is `true`, the following cases are allowed:\n                                    `[(a)] = [0]`, `[(a.b)] = [0]`\n\n   * @returns {Node} The converted assignable pattern\n   * @memberof LValParser\n   */\n  toAssignable(node: Node, isLHS: boolean = false): Node {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordParenthesizedIdentifierError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(\n            node.start,\n            Errors.InvalidParenthesizedAssignment,\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(node.start, Errors.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, Errors.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingComma\n          ) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\": {\n        this.checkToRestConversion(node);\n\n        node.type = \"RestElement\";\n        const arg = node.argument;\n        this.toAssignable(arg, isLHS);\n        break;\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, node.extra?.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, Errors.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      const error =\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod;\n\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(prop.key.start, error);\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaPos?: ?number,\n    isLHS: boolean,\n  ): $ReadOnlyArray<Pattern> {\n    let end = exprList.length;\n    if (end) {\n      const last = exprList[end - 1];\n      if (last?.type === \"RestElement\") {\n        --end;\n      } else if (last?.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n        if (\n          arg.type !== \"Identifier\" &&\n          arg.type !== \"MemberExpression\" &&\n          arg.type !== \"ArrayPattern\" &&\n          arg.type !== \"ObjectPattern\"\n        ) {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n    return exprList;\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refExpressionErrors: ?ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, Errors.UnsupportedParameterDecorator);\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc ?? this.state.startLoc;\n    startPos = startPos ?? this.state.start;\n    // $FlowIgnore\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  /**\n   * Verify that if a node is an lval - something that can be assigned to.\n   *\n   * @param {Expression} expr The given node\n   * @param {string} contextDescription The auxiliary context information printed when error is thrown\n   * @param {BindingTypes} [bindingType=BIND_NONE] The desired binding type. If the given node is an identifier and `bindingType` is not\n                                                   BIND_NONE, `checkLVal` will register binding to the parser scope\n                                                   See also src/util/scopeflags.js\n   * @param {?Set<string>} checkClashes An optional string set to check if an identifier name is included. `checkLVal` will add checked\n                                        identifier name to `checkClashes` It is used in tracking duplicates in function parameter lists. If\n                                        it is nullish, `checkLVal` will skip duplicate checks\n   * @param {boolean} [disallowLetBinding] Whether an identifier named \"let\" should be disallowed\n   * @param {boolean} [strictModeChanged=false] Whether an identifier has been parsed in a sloppy context but should be reinterpreted as\n                                                strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @memberof LValParser\n   */\n  checkLVal(\n    expr: Expression,\n    contextDescription: string,\n    bindingType: BindingTypes = BIND_NONE,\n    checkClashes: ?Set<string>,\n    disallowLetBinding?: boolean,\n    strictModeChanged?: boolean = false,\n  ): void {\n    switch (expr.type) {\n      case \"Identifier\": {\n        const { name } = expr;\n        if (\n          this.state.strict &&\n          // \"Global\" reserved words have already been checked by parseIdentifier,\n          // unless they have been found in the id or parameters of a strict-mode\n          // function in a sloppy context.\n          (strictModeChanged\n            ? isStrictBindReservedWord(name, this.inModule)\n            : isStrictBindOnlyReservedWord(name))\n        ) {\n          this.raise(\n            expr.start,\n            bindingType === BIND_NONE\n              ? Errors.StrictEvalArguments\n              : Errors.StrictEvalArgumentsBinding,\n            name,\n          );\n        }\n\n        if (checkClashes) {\n          if (checkClashes.has(name)) {\n            this.raise(expr.start, Errors.ParamDupe);\n          } else {\n            checkClashes.add(name);\n          }\n        }\n        if (disallowLetBinding && name === \"let\") {\n          this.raise(expr.start, Errors.LetInLexicalBinding);\n        }\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(name, bindingType, expr.start);\n        }\n        break;\n      }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, Errors.InvalidPropertyBindingPattern);\n        }\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;\n          // If we find here an ObjectMethod, it's because this was originally\n          // an ObjectExpression which has then been converted.\n          // toAssignable already reported this error with a nicer message.\n          else if (this.isObjectMethod(prop)) continue;\n\n          this.checkLVal(\n            prop,\n            \"object destructuring pattern\",\n            bindingType,\n            checkClashes,\n            disallowLetBinding,\n          );\n        }\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(\n              elem,\n              \"array destructuring pattern\",\n              bindingType,\n              checkClashes,\n              disallowLetBinding,\n            );\n          }\n        }\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(\n          expr.left,\n          \"assignment pattern\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(\n          expr.argument,\n          \"rest element\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(\n          expr.expression,\n          \"parenthesized expression\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      default: {\n        this.raise(\n          expr.start,\n          bindingType === BIND_NONE\n            ? Errors.InvalidLhs\n            : Errors.InvalidLhsBinding,\n          contextDescription,\n        );\n      }\n    }\n  }\n\n  checkToRestConversion(node: SpreadElement): void {\n    if (\n      node.argument.type !== \"Identifier\" &&\n      node.argument.type !== \"MemberExpression\"\n    ) {\n      this.raise(node.argument.start, Errors.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): void {\n    if (this.match(tt.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos: number) {\n    throw this.raise(pos, Errors.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos: number) {\n    this.raise(pos, Errors.RestTrailingComma);\n  }\n}\n","// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport { Position } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, SourceTypeModuleErrors } from \"./error\";\nimport type { ParsingError } from \"./error\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier } from \"./node\";\n\n/*::\nimport type { SourceType } from \"../options\";\n*/\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n  +parseBlockOrModuleBlockBody: (\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void\n  ) => void\n  +parseProgram: (\n    program: N.Program, end: TokenType, sourceType?: SourceType\n  ) => N.Program\n  */\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean,\n    protoRef: { used: boolean },\n    refExpressionErrors: ?ExpressionErrors,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // $FlowIgnore\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, Errors.RecordNoProto);\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, Errors.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(refExpressionErrors?: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParsingError,\n  ) {\n    refExpressionErrors.optionalParameters =\n      resultError?.pos ?? this.state.start;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(tt.parenL) || this.match(tt.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      const leftIsHackPipeExpression =\n        left.type === \"BinaryExpression\" &&\n        left.operator === \"|>\" &&\n        this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"hack\";\n\n      if (leftIsHackPipeExpression) {\n        // If the pipelinePlugin is configured to use Hack pipes,\n        // and if an assignment expression’s LHS invalidly contains `|>`,\n        // then the user likely meant to parenthesize the assignment expression.\n        // Throw a human-friendly error\n        // instead of something like 'Invalid left-hand side'.\n        // For example, `x = x |> y = #` (assuming `#` is the topic reference)\n        // groups into `x = (x |> y) = #`,\n        // and `(x |> y)` is an invalid assignment LHS.\n        // This is because Hack-style `|>` has tighter precedence than `=>`.\n        // (Unparenthesized `yield` expressions are handled\n        // in `parseHackPipeBody`,\n        // and unparenthesized `=>` expressions are handled\n        // in `checkHackPipeBodyEarlyErrors`.)\n        throw this.raise(this.state.start, Errors.PipeBodyIsTighter, operator);\n      }\n\n      if (this.match(tt.eq)) {\n        node.left = this.toAssignable(left, /* isLHS */ true);\n        refExpressionErrors.doubleProto = -1; // reset because double __proto__ is valid in assignment expression\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1; // reset because shorthand default was used correctly\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    // eslint-disable-next-line no-unused-vars\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    let prec = this.state.type.binop;\n    if (prec != null && (this.prodParam.hasIn || !this.match(tt._in))) {\n      if (prec > minPrec) {\n        const op = this.state.type;\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = ((tt.logicalAND: any): { binop: number }).binop;\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\"\n        ) {\n          if (\n            this.match(tt.name) &&\n            this.state.value === \"await\" &&\n            this.prodParam.hasAwait\n          ) {\n            throw this.raise(\n              this.state.start,\n              Errors.UnexpectedAwaitAfterPipelineBody,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(this.state.start, Errors.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              const bodyExpr = this.parseHackPipeBody(op, prec);\n              this.checkHackPipeBodyEarlyErrors(startPos);\n              return bodyExpr;\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              const childExpr = this.parseHackPipeBody(op, prec);\n              return this.parseSmartPipelineBodyInStyle(\n                childExpr,\n                startPos,\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnary(),\n      startPos,\n      startLoc,\n      op.rightAssociative ? prec - 1 : prec,\n    );\n  }\n\n  // Helper function for `parseExprOpRightExpr` for the Hack-pipe operator\n  // (and the Hack-style smart-mix pipe operator).\n\n  parseHackPipeBody(op: TokenType, prec: number): N.Expression {\n    // If the following expression is invalidly a `yield` expression,\n    // then throw a human-friendly error.\n    // A `yield` expression in a generator context (i.e., a [Yield] production)\n    // starts a YieldExpression.\n    // Outside of a generator context, any `yield` as a pipe body\n    // is considered simply an identifier.\n    // This error is checked here, before actually parsing the body expression,\n    // because `yield`’s “not allowed as identifier in generator” error\n    // would otherwise have immediately\n    // occur before the pipe body is fully parsed.\n    // (Unparenthesized assignment expressions are handled\n    // in `parseMaybeAssign`,\n    // and unparenthesized `=>` expressions are handled\n    // in `checkHackPipeBodyEarlyErrors`.)\n    const bodyIsInGeneratorContext = this.prodParam.hasYield;\n    const bodyIsYieldExpression =\n      bodyIsInGeneratorContext && this.isContextual(\"yield\");\n\n    if (bodyIsYieldExpression) {\n      throw this.raise(\n        this.state.start,\n        Errors.PipeBodyIsTighter,\n        this.state.value,\n      );\n    } else {\n      return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  checkExponentialAfterUnary(node: N.AwaitExpression | N.UnaryExpression) {\n    if (this.match(tt.exponent)) {\n      this.raise(\n        node.argument.start,\n        Errors.UnexpectedTokenUnaryExponentiation,\n      );\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    refExpressionErrors: ?ExpressionErrors,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(\"await\");\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode();\n    if (this.state.type.prefix) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, Errors.StrictDelete);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(node.start, Errors.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? this.state.type.startsExpr\n        : this.state.type.startsExpr && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startPos, Errors.AwaitNotInAsyncContext);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.Expression {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    if (!noCalls && this.eat(tt.doubleColon)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(tt.backQuote)) {\n      return this.parseTaggedTemplateExpression(\n        base,\n        startPos,\n        startLoc,\n        state,\n      );\n    }\n\n    let optional = false;\n    if (this.match(tt.questionDot)) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startPos,\n        startLoc,\n        state,\n        optional,\n      );\n    } else if (optional || this.match(tt.bracketL) || this.eat(tt.dot)) {\n      return this.parseMember(base, startPos, startLoc, state, optional);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n    const computed = this.eat(tt.bracketL);\n    node.object = base;\n    node.computed = computed;\n    const privateName =\n      !computed && this.match(tt.privateName) && this.state.value;\n    const property = computed\n      ? this.parseExpression()\n      : privateName\n      ? this.parsePrivateName()\n      : this.parseIdentifier(true);\n\n    if (privateName !== false) {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, Errors.SuperPrivateField);\n      }\n      this.classScope.usePrivateName(privateName, property.start);\n    }\n    node.property = property;\n\n    if (computed) {\n      this.expect(tt.bracketR);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startPos,\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        node,\n        refExpressionErrors,\n      );\n    }\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt(startPos, startLoc),\n        node,\n      );\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return node;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(startPos, Errors.OptionalChainingNoTemplate);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEnd === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): N.Expression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(\n          node.start,\n          Errors.ImportCallArity,\n          this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n            ? \"one or two arguments\"\n            : \"one argument\",\n        );\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, Errors.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.ImportCallArgumentTrailingComma,\n            );\n          }\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingComma,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    setInnerComments(node, call.innerComments);\n    // mark trailing comments of `async` to be inner comments\n    setInnerComments(node, call.callee.trailingComments);\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n    let node;\n\n    switch (this.state.type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(this.state.lastTokStart, Errors.UnsupportedImport);\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt.name: {\n        if (\n          this.isContextual(\"module\") &&\n          this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n          !this.hasFollowingLineBreak()\n        ) {\n          return this.parseModuleExpression();\n        }\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        const containsEsc = this.state.containsEsc;\n        const id = this.parseIdentifier();\n\n        if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n          if (this.match(tt._function)) {\n            this.resetPreviousNodeTrailingComments(id);\n            this.next();\n            return this.parseFunction(\n              this.startNodeAtNode(id),\n              undefined,\n              true,\n            );\n          } else if (this.match(tt.name)) {\n            // If the next token begins with \"=\", commit to parsing an async\n            // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n            // expensive full-token lookahead on this common path.)\n            if (this.lookaheadCharCode() === charCodes.equalsTo) {\n              // although `id` is not used in async arrow unary function,\n              // we don't need to reset `async`'s trailing comments because\n              // it will be attached to the upcoming async arrow binding identifier\n              return this.parseAsyncArrowUnaryFunction(\n                this.startNodeAtNode(id),\n              );\n            } else {\n              // Otherwise, treat \"async\" as an identifier and let calling code\n              // deal with the current tt.name token.\n              return id;\n            }\n          } else if (this.match(tt._do)) {\n            this.resetPreviousNodeTrailingComments(id);\n            return this.parseDo(this.startNodeAtNode(id), true);\n          }\n        }\n\n        if (canBeArrow && this.match(tt.arrow) && !this.canInsertSemicolon()) {\n          this.next();\n          return this.parseArrowExpression(\n            this.startNodeAtNode(id),\n            [id],\n            false,\n          );\n        }\n\n        return id;\n      }\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n          refExpressionErrors,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.backQuote:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(callee.start, Errors.UnsupportedBind);\n        }\n      }\n\n      case tt.privateName: {\n        // https://tc39.es/proposal-private-fields-in-in\n        // RelationalExpression [In, Yield, Await]\n        //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n        const { value, start } = this.state;\n        node = this.parsePrivateName();\n        if (this.match(tt._in)) {\n          this.classScope.usePrivateName(value, start);\n        } else {\n          this.raise(start, Errors.PrivateInExpectedIn, value);\n        }\n        return node;\n      }\n\n      case tt.moduloAssign:\n        if (\n          this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"hack\" &&\n          this.getPluginOption(\"pipelineOperator\", \"topicToken\") === \"%\"\n        ) {\n          // If we find %= in an expression position, and the Hack-pipes proposal is active,\n          // then the % could be the topic token (e.g., in x |> %==y or x |> %===y), and so we\n          // reparse it as %.\n          // The next readToken() call will start parsing from =.\n\n          this.state.value = \"%\";\n          this.state.type = tt.modulo;\n          this.state.pos--;\n          this.state.end--;\n          this.state.endLoc.column--;\n        } else {\n          throw this.unexpected();\n        }\n\n      // falls through\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          // A pipe-operator proposal is active,\n          // although its configuration might not match the current token’s type.\n          node = this.startNode();\n          const start = this.state.start;\n          const tokenType = this.state.type;\n\n          // Consume the current token.\n          this.next();\n\n          // If the pipe-operator plugin’s configuration matches the current token’s type,\n          // then this will return `node`, will have been finished as a topic reference.\n          // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n          return this.finishTopicReference(\n            node,\n            start,\n            pipeProposal,\n            tokenType,\n          );\n        }\n      }\n\n      // fall through\n      case tt.relational: {\n        if (this.state.value === \"<\") {\n          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n          if (\n            isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n            lookaheadCh === charCodes.greaterThan // Fragment <>\n          ) {\n            this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          }\n        }\n      }\n\n      // fall through\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: N.Node,\n    start: number,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (this.testTopicReferenceConfiguration(pipeProposal, start, tokenType)) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      let nodeType;\n      if (pipeProposal === \"smart\") {\n        nodeType = \"PipelinePrimaryTopicReference\";\n      } else {\n        // The proposal must otherwise be \"hack\",\n        // as enforced by testTopicReferenceConfiguration.\n        nodeType = \"TopicReference\";\n      }\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        // The topic reference is not allowed in the current context:\n        // it is outside of a pipe body.\n        // Raise recoverable errors.\n        if (pipeProposal === \"smart\") {\n          this.raise(start, Errors.PrimaryTopicNotAllowed);\n        } else {\n          // In this case, `pipeProposal === \"hack\"` is true.\n          this.raise(start, Errors.PipeTopicUnbound);\n        }\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(\n        start,\n        Errors.PipeTopicUnconfiguredToken,\n        tokenType.label,\n      );\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    start: number,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        const pluginTopicToken = this.getPluginOption(\n          \"pipelineOperator\",\n          \"topicToken\",\n        );\n        return tokenType.label === pluginTopicToken;\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(start, Errors.PipeTopicRequiresHackPipes);\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(node: N.Node): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, Errors.LineTerminatorBeforeArrow);\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(node: N.Node, isAsync: boolean): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(node.start, Errors.SuperNotAllowed);\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(node.start, Errors.UnexpectedSuper);\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(node.start, Errors.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseMaybePrivateName(\n    isPrivateNameAllowed: boolean,\n  ): N.PrivateName | N.Identifier {\n    const isPrivate = this.match(tt.privateName);\n\n    if (isPrivate) {\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.start + 1, Errors.UnexpectedPrivateField);\n      }\n      return this.parsePrivateName();\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode();\n    const id = this.startNodeAt(\n      this.state.start + 1,\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      new Position(\n        this.state.curLine,\n        this.state.start + 1 - this.state.lineStart,\n      ),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(\n        node.property.start,\n        Errors.UnsupportedMetaProperty,\n        meta.name,\n        propertyName,\n      );\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next(); // eat `.`\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raise(id.start, SourceTypeModuleErrors.ImportMetaOutsideModule);\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T: N.Node>(\n    value: any,\n    type: $ElementType<T, \"type\">,\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: { value: any, pattern: string, flags: string }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode<N.BooleanLiteral>(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode<N.NullLiteral>(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParameters === -1\n            ? null\n            : refExpressionErrors.optionalParameters,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        this.checkCommaAfterRest(charCodes.rightParenthesis);\n\n        break;\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      val.end = innerEndPos;\n      val.loc.end = innerEndLoc;\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  // eslint-disable-next-line no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(metaProp.start, Errors.UnexpectedNewTarget);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(node: N.Expression): N.NewExpression {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, Errors.ImportCallNotNewExpression);\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(this.state.lastTokEnd, Errors.OptionalChainingNoNew);\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(this.state.start, Errors.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node: N.NewExpression): void {\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const elem = this.startNode();\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, Errors.InvalidEscapeSequenceTemplate);\n      }\n    }\n    elem.value = {\n      raw: this.input\n        .slice(this.state.start, this.state.end)\n        .replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value,\n    };\n    this.next();\n    elem.tail = this.match(tt.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      this.expect(tt.dollarBraceL);\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.expect(tt.braceR);\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike<T: N.ObjectPattern | N.ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n      if (!isPattern) {\n        // $FlowIgnore RestElement will never be returned if !isPattern\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(prop.start, Errors.InvalidRecordProperty);\n      }\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    isPattern: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.ObjectMember | N.SpreadElement | N.RestElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, Errors.UnsupportedPropertyDecorator);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      if (isPattern) {\n        this.next();\n        // Don't use parseRestBinding() as we only allow Identifier here.\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(tt.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n\n    if (\n      !isPattern &&\n      !isGenerator &&\n      !containsEsc &&\n      this.maybeAsyncOrAccessorProp(prop)\n    ) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(this.state.pos, Errors.AccessorIsGenerator, keyName);\n          this.next();\n        }\n        this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n      }\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      isPattern,\n      isAccessor,\n      refExpressionErrors,\n    );\n\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, Errors.BadGetterArity);\n      } else {\n        this.raise(start, Errors.BadSetterArity);\n      }\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(start, Errors.BadSetterRestParameter);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): ?N.ObjectMethod {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoveredInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n    isPrivateNameAllowed: boolean,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      // We check if it's valid for it to be a private name when we push it.\n      const type = this.state.type;\n      (prop: $FlowFixMe).key =\n        type === tt.num ||\n        type === tt.string ||\n        type === tt.bigint ||\n        type === tt.decimal\n          ? this.parseExprAtom()\n          : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return node;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaPos: ?number,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody and AsyncConciseBody inherit [In]\n    if (!this.match(tt.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaPos: ?number,\n  ): void {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            const errorPos =\n              // $FlowIgnore\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n              // $FlowIgnore\n              !!node.key\n                ? node.key.end\n                : node.start;\n            this.raise(errorPos, Errors.IllegalLanguageModeDirective);\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkLVal(\n              node.id,\n              \"function name\",\n              BIND_OUTSIDE,\n              undefined,\n              undefined,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.expressionScope.exit();\n      this.state.labels = oldLabels;\n    }\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    const checkClashes = new Set();\n    for (const param of node.params) {\n      this.checkLVal(\n        param,\n        \"function parameter list\",\n        BIND_VAR,\n        allowDuplicates ? null : checkClashes,\n        undefined,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, Errors.UnexpectedToken, \",\");\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, Errors.UnexpectedArgumentPlaceholder);\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    const { start, type } = this.state;\n\n    if (type === tt.name) {\n      name = this.state.value;\n    } else if (type.keyword) {\n      name = type.keyword;\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      this.state.type = tt.name;\n    } else {\n      this.checkReservedWord(name, start, !!type.keyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: number,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(startLoc, Errors.YieldBindingIdentifier);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, Errors.AwaitBindingIdentifier);\n        return;\n      } else if (this.scope.inStaticBlock) {\n        this.raise(startLoc, Errors.AwaitBindingIdentifierInStaticBlock);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(\n          startLoc,\n          Errors.AwaitBindingIdentifier,\n        );\n      }\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(startLoc, Errors.ArgumentsInClass);\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, Errors.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(startLoc, Errors.UnexpectedReservedWord, word);\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(startPos: number, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      node.start,\n      Errors.AwaitExpressionFormalParameter,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(node.start, Errors.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    return (\n      this.hasPrecedingLineBreak() ||\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n      this.match(tt.plusMin) ||\n      this.match(tt.parenL) ||\n      this.match(tt.bracketL) ||\n      this.match(tt.backQuote) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      this.match(tt.regexp) ||\n      this.match(tt.slash) ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && this.match(tt.modulo))\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(): N.YieldExpression {\n    const node = this.startNode();\n\n    this.expressionScope.recordParameterInitializerError(\n      node.start,\n      Errors.YieldInParameter,\n    );\n\n    this.next();\n    let delegating = false;\n    let argument = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartPos: number) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(leftStartPos, Errors.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a Hack-style pipe body is parsed.\n  // The `startPos` is the starting position of the pipe body.\n\n  checkHackPipeBodyEarlyErrors(startPos: number): void {\n    // If the following token is invalidly `=>`,\n    // then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because Hack-style `|>` has tighter precedence than `=>`.\n    // (Unparenthesized `yield` expressions are handled\n    // in `parseHackPipeBody`,\n    // and unparenthesized assignment expressions are handled\n    // in `parseMaybeAssign`.)\n    if (this.match(tt.arrow)) {\n      throw this.raise(\n        this.state.start,\n        Errors.PipeBodyIsTighter,\n        tt.arrow.label,\n      );\n    } else if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(startPos, Errors.PipeTopicUnused);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startPos);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startPos` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startPos: number): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(this.state.start, Errors.PipelineBodyNoArrow);\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    else if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(startPos, Errors.PipelineTopicUnused);\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    const proposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n    if (proposal === \"smart\") {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnary(),\n      startPos,\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    this.eat(tt.braceL);\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    const program = this.startNode<N.Program>();\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    this.eat(tt.braceR);\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n}\n","// @flow\n\nimport * as N from \"../types\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors, SourceTypeModuleErrors } from \"./error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport { Position } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier } from \"./node\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tt.privateName to tt.hash + tt.name for backward Babel 7 compat.\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n * @param {*} tokens\n * @returns\n */\nfunction babel7CompatTokens(tokens) {\n  if (!process.env.BABEL_8_BREAKING) {\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n      if (token.type === tt.privateName) {\n        const { loc, start, value, end } = token;\n        const hashEndPos = start + 1;\n        const hashEndLoc = new Position(loc.start.line, loc.start.column + 1);\n        tokens.splice(\n          i,\n          1,\n          // $FlowIgnore: hacky way to create token\n          new Token({\n            type: tt.hash,\n            value: \"#\",\n            start: start,\n            end: hashEndPos,\n            startLoc: loc.start,\n            endLoc: hashEndLoc,\n          }),\n          // $FlowIgnore: hacky way to create token\n          new Token({\n            type: tt.name,\n            value: value,\n            start: hashEndPos,\n            end: end,\n            startLoc: hashEndLoc,\n            endLoc: loc.end,\n          }),\n        );\n      }\n    }\n  }\n  return tokens;\n}\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) file.tokens = babel7CompatTokens(this.tokens);\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    program: N.Program,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        // $FlowIssue\n        this.raise(pos, Errors.ModuleExportUndefined, name);\n      }\n    }\n    return this.finishNode<N.Program>(program, \"Program\");\n  }\n\n  // TODO\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   *\n   * @param {N.Statement} stmt\n   * @returns {N.Directive}\n   * @memberof StatementParser\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = (stmt: any);\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directiveLiteral.type = \"DirectiveLiteral\";\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n    return this.isLetKeyword(context);\n  }\n\n  /**\n   * Assuming we have seen a contextual `let`, check if it starts a variable declaration\n   so that `left` should be interpreted as a `let` keyword.\n   *\n   * @param {?string} context When `context` is non nullish, it will return early and _skip_ checking\n                              if the next token after `let` is `{` or a keyword relational operator\n   * @returns {boolean}\n   * @memberof StatementParser\n   */\n  isLetKeyword(context: ?string): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    // Also, `let \\` is never valid as an expression so this must be a keyword.\n    if (\n      nextCh === charCodes.backslash ||\n      nextCh === charCodes.leftSquareBracket\n    ) {\n      return true;\n    }\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n      case tt._continue:\n        // $FlowFixMe\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, Errors.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, Errors.SloppyFunction);\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, Errors.UnexpectedLexicalDeclaration);\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(this.state.start, Errors.UnexpectedImportExport);\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(\n              this.state.start,\n              Errors.AsyncFunctionInSingleStatementContext,\n            );\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      starttype === tt.name &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(node.start, SourceTypeModuleErrors.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, Errors.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.eat(tt.parenL)) {\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    keyword: string,\n  ): N.BreakStatement | N.ContinueStatement {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    keyword: string,\n  ) {\n    const isBreak = keyword === \"break\";\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      this.raise(node.start, Errors.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = -1;\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(\"let\");\n    const isLet = startsWithLet && this.isLetKeyword();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(\"of\")) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithUnescapedName =\n      this.match(tt.name) && !this.state.containsEsc;\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(\"of\");\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(init.start, Errors.ForOfLet);\n      } else if (\n        // `for await (async of []);` is allowed.\n        awaitAt === -1 &&\n        startsWithUnescapedName &&\n        init.type === \"Identifier\" &&\n        init.name === \"async\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(init.start, Errors.ForOfAsync);\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.toAssignable(init, /* isLHS */ true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, Errors.IllegalReturn);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.MultipleDefaultsInSwitch,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, Errors.NewlineAfterThrow);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n\n    return param;\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, Errors.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(this.state.start, Errors.StrictWith);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, Errors.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: number,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(\n        init.start,\n        Errors.ForInOfLoopInitializer,\n        isForIn ? \"for-in\" : \"for-of\",\n      );\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, Errors.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(tt.eq)) {\n        decl.init = isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n      } else {\n        if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(\"of\"))\n        ) {\n          // `const` with no initializer is allowed in TypeScript.\n          // It could be a declaration like `const x: number;`.\n          if (!isTypescript) {\n            this.raise(\n              this.state.lastTokEnd,\n              Errors.DeclarationMissingInitializer,\n              \"Const declarations\",\n            );\n          }\n        } else if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(\"of\")))\n        ) {\n          this.raise(\n            this.state.lastTokEnd,\n            Errors.DeclarationMissingInitializer,\n            \"Complex binding patterns\",\n          );\n        }\n        decl.init = null;\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(\n      decl.id,\n      \"variable declaration\",\n      kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n      undefined,\n      kind !== \"var\",\n    );\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(this.state.start, Errors.GeneratorInSingleStatementContext);\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || this.match(tt.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(hadSuperClass: boolean, oldStrict: boolean): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, Errors.DecoratorSemicolon);\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(member.start, Errors.DecoratorConstructor);\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, Errors.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = (member: any);\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = (member: any);\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassMethod> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateMethod> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, Errors.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual = this.match(tt.name) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStart = this.state.start;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, Errors.DuplicateConstructor);\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(key.start, Errors.OverrideOnConstructor);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAccessor);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/proposal-class-fields/#prod-ClassElementName\n  parseClassElementName(member: N.ClassMember): N.Expression | N.Identifier {\n    const { type, value, start } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(start, Errors.StaticPrototype);\n    }\n\n    if (type === tt.privateName && value === \"constructor\") {\n      this.raise(start, Errors.ConstructorClassPrivateField);\n    }\n\n    return this.parsePropertyName(member, /* isPrivateNameAllowed */ true);\n  }\n\n  parseClassStaticBlock(\n    classBody: N.ClassBody,\n    member: N.StaticBlock & { decorators?: Array<N.Decorator> },\n  ) {\n    this.expectPlugin(\"classStaticBlock\", member.start);\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(member.start, Errors.DecoratorStaticBlock);\n    }\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(prop.key.start, Errors.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.start,\n    );\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // https://tc39.es/proposal-class-fields/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/proposal-class-fields/#prod-FieldDefinition\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  // https://tc39.es/proposal-class-fields/#prod-Initializer\n  parseInitializer(node: N.ClassProperty | N.ClassPrivateProperty): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (this.match(tt.name)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, Errors.MissingClassName);\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n\n      node.source = null;\n      node.declaration = null;\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    } else if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorBeforeExport);\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(this.state.start, Errors.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    if (this.match(tt.name)) {\n      const value = this.state.value;\n      if ((value === \"async\" && !this.state.containsEsc) || value === \"let\") {\n        return false;\n      }\n      if (\n        (value === \"type\" || value === \"interface\") &&\n        !this.state.containsEsc\n      ) {\n        const l = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (l.type === tt.name && l.value !== \"from\") ||\n          l.type === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (this.match(tt.name) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    if (this.match(tt.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, Errors.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return (\n      this.state.type.keyword === \"var\" ||\n      this.state.type.keyword === \"const\" ||\n      this.state.type.keyword === \"function\" ||\n      this.state.type.keyword === \"class\" ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = ((node: any): N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(declaration.start, Errors.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportedName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(\n                specifier.start,\n                Errors.ExportBindingIsString,\n                local.value,\n                exportedName,\n              );\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    // If node.declaration is a class, it will take all decorators in the current context.\n    // Thus we should throw if we see non-empty decorators here.\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, Errors.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    name: string,\n  ): void {\n    if (this.exportedIdentifiers.has(name)) {\n      this.raise(\n        node.start,\n        name === \"default\"\n          ? Errors.DuplicateDefaultExport\n          : Errors.DuplicateExport,\n        name,\n      );\n    }\n    this.exportedIdentifiers.add(name);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const node = this.startNode();\n      const isString = this.match(tt.string);\n      const local = this.parseModuleExportName();\n      node.local = local;\n      if (this.eatContextual(\"as\")) {\n        node.exported = this.parseModuleExportName();\n      } else if (isString) {\n        node.exported = cloneStringLiteral(local);\n      } else {\n        node.exported = cloneIdentifier(local);\n      }\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(\n          result.start,\n          Errors.ModuleExportNameHasLoneSurrogate,\n          surrogate[0].charCodeAt(0).toString(16),\n        );\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return this.match(tt.name);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n    contextDescription: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries |AssertEntries}\n   * @returns {N.ImportAttribute[]}\n   * @memberof StatementParser\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          this.state.start,\n          Errors.ModuleAttributesWithDuplicateKeys,\n          keyName,\n        );\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.unexpected(\n          this.state.start,\n          Errors.ModuleAttributeInvalidValue,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode<N.ImportAttribute>(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   * @returns\n   * @memberof StatementParser\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributeDifferentFromType,\n          node.key.name,\n        );\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributesWithDuplicateKeys,\n          node.key.name,\n        );\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.unexpected(\n          this.state.start,\n          Errors.ModuleAttributeInvalidValue,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(\"assert\") && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n        \"default import specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n        \"import namespace specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(this.state.start, Errors.DestructureNamedImport);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(node: N.ImportDeclaration): void {\n    const specifier = this.startNode();\n    const importedIsString = this.match(tt.string);\n    specifier.imported = this.parseModuleExportName();\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(\n          specifier.start,\n          Errors.ImportBindingIsString,\n          imported.value,\n        );\n      }\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n      specifier.local = cloneIdentifier(imported);\n    }\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { File /*::, JSXOpeningElement */ } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  /*::\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n  */\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { types as tokTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nexport { tokTypes };\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n"],"names":["beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","TokenType","constructor","label","conf","keyword","rightAssociative","binop","updateContext","keywords","Map","createKeyword","name","options","token","set","createBinop","types","num","bigint","decimal","regexp","string","privateName","eof","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","template","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","assign","slashAssign","moduloAssign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","exponent","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","lineBreak","lineBreakG","RegExp","source","isNewLine","code","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","Position","line","col","column","SourceLocation","start","end","filename","identifierName","getLineInfo","input","offset","lineStart","match","lastIndex","exec","index","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","hasPlugin","plugins","has","getPluginOption","plugin","get","setTrailingComments","node","comments","trailingComments","undefined","unshift","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","i","length","CommentsParser","addComment","comment","loc","state","push","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","leadingComments","commentStart","charCodeAt","type","properties","arguments","params","specifiers","finalizeRemainingComments","resetPreviousNodeTrailingComments","ErrorCodes","Object","freeze","SyntaxError","SourceTypeModuleError","ErrorMessages","makeErrorTemplates","AccessorIsGenerator","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","InvalidBigIntLiteral","InvalidCodePoint","InvalidDecimal","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","PipeTopicUnused","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","SourceTypeModuleErrorMessages","ImportMetaOutsideModule","ImportOutsideModule","messages","templates","keys","forEach","reasonCode","ParserError","getLocationForPosition","pos","startLoc","lastTokStart","lastTokStartLoc","endLoc","lastTokEnd","lastTokEndLoc","raise","raiseWithData","raiseOverwrite","message","replace","_","errorRecovery","errors","error","_raise","data","errorTemplate","errorContext","err","isLookahead","superClass","parseRegExpLiteral","pattern","flags","regex","e","estreeParseLiteral","parseBigIntLiteral","value","bigInt","BigInt","String","parseDecimalLiteral","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","extra","expressionValue","raw","finishNodeAt","slice","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","isValidDirective","parenthesized","stmtToDirective","addExtra","parseBlockBody","args","directiveStatements","directives","map","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parseMaybePrivateName","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","kind","computed","finishNode","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startPos","refExpressionErrors","isAssignable","isBinding","toAssignable","isLHS","toAssignableObjectExpressionProp","key","Errors","finishCallExpression","optional","callee","attributes","toReferencedArguments","parseExport","exported","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","TokContext","preserveSpace","brace","tt","context","pop","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","Set","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","undefinedPrivateNames","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","State","curLine","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","inPropertyName","hasFlowComment","isAmbientContext","inAbstractClass","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","ct","exprAllowed","containsEsc","strictErrors","tokensLength","init","strictMode","sourceType","startLine","curPosition","clone","skipArrays","val","Array","isArray","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","ParserErrors","tokens","pushToken","checkKeywordEscapes","nextToken","eat","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","clear","skipSpace","finishToken","readTmplToken","getTokenFromCode","skipBlockComment","indexOf","skipLineComment","startSkip","ch","spaceStart","loop","attachComment","CommentWhitespace","prevType","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","readToken_plus_min","readToken_lt_gt","size","readToken_eq_excl","readToken_question","next2","readRadixNumber","readString","readWord","fromCodePoint","str","readRegexp","escaped","content","mods","char","includes","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","invalid","total","Infinity","prev","Number","isNaN","isBigInt","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseInt","parseFloat","readCodePoint","throwOnInvalid","codePos","readHexChar","quote","out","chunkStart","readEscapedChar","containsInvalid","inTemplate","substr","octalStr","octal","n","firstCode","escStart","identifierCheck","esc","keywordTypes","kw","ClassScope","privateNames","loneAccessors","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","classScope","redefined","accessor","oldStatic","newStatic","oldKind","newKind","usePrivateName","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","recordDeclarationError","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","recordParenthesizedIdentifierError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","isRelational","op","expectRelational","unexpected","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","assertNoSpace","messageOrType","missingPlugin","expectOnePlugin","names","some","join","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssign","doubleProto","optionalParameters","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","bind","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","ExpressionErrors","Node","parser","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","resetStartLocation","resetEndLocation","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","OptionalBindingPattern","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flowPragma","shouldParseTypes","shouldParseEnums","matches","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloPos","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","suggestion","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","variance","flowParseVariance","ident","bound","jsxTagStart","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStart","inexactStart","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","topLevel","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","toAssignableList","trailingComma","checkParams","parse","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","exprList","trailingCommaPos","toReferencedList","isParenthesizedExpr","parseArrayLike","close","canBePattern","isTuple","checkLVal","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyName","isPrivateNameAllowed","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","contextDescription","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","firstIdentIsString","firstIdent","parseModuleExportName","specifierTypeKind","as_ident","imported","nodeIsTypeImport","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","tc","j_oTag","j_expr","abort","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewArguments","targs","parseArrowExpression","parseTopLevel","file","program","fileNode","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidMemberName","toUpperCase","flowEnumErrorDuplicateMemberName","flowEnumErrorInconsistentMemberValues","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","MissingClosingTagFragment","UnexpectedSequenceExpression","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","j_cTag","jsxName","jsxText","jsxTagEnd","isFragment","object","getQualifiedJSXName","namespace","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","count","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","lookaheadState","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","AbstractPropertyHasInitializer","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InvalidModifierOnTypeMember","InvalidModifiersOrder","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PatternIsOptional","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","modifier","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","tsTryParse","tsParseModifiers","modified","disallowedModifiers","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","tsParseDelimitedListWorker","expectSuccess","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","find","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsIsDeclarationStart","parseAssignableListItem","decorators","override","elt","pp","parameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorPos","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","interfaceNode","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","modifiers","invalidModifersForStaticBlocks","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","parseClassPropertyAnnotation","definite","typeCast","toAssignableParenthesizedExpression","parseMaybeDecoratorArguments","checkCommaAfterRest","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","getExpression","placeholder","PlaceHolderErrors","ClassNameIsRequired","parsePlaceholder","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","parseV8Intrinsic","v8IntrinsicStart","parseIdentifierName","identifier","option","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","proposal","proposalList","p","tupleSyntaxIsHash","topicToken","tokenList","moduleAttributesVerionPluginOption","missingPlugins","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","unwrapParenthesizedExpression","LValParser","last","isLast","raiseRestNotLast","checkToRestConversion","arg","raiseTrailingCommaAfterRest","toReferencedListDeep","parseSpread","refNeedsArrowPos","parseRestBinding","parseObjectLike","closeCharCode","allowEmpty","elts","parseDecorator","checkClashes","disallowLetBinding","strictModeChanged","elem","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","expressions","parseMaybeAssignDisallowIn","resultError","parseYield","ownExpressionErrors","parseMaybeConditional","leftIsHackPipeExpression","parseExprOps","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicBindingContext","bodyExpr","parseHackPipeBody","checkHackPipeBodyEarlyErrors","childExpr","parseSmartPipelineBodyInStyle","withSoloAwaitPermittingContext","parseFSharpPipelineBody","parseExprOpBaseRightExpr","bodyIsInGeneratorContext","bodyIsYieldExpression","checkExponentialAfterUnary","sawUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parsePrivateName","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","parseExprListItem","parseSuper","parseImportMetaProperty","parseModuleExpression","parseFunction","parseAsyncArrowUnaryFunction","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","pipeProposal","tokenType","finishTopicReference","lookaheadCh","codePointAt","testTopicReferenceConfiguration","nodeType","topicReferenceIsAllowedInCurrentContext","registerTopicReference","pluginTopicToken","isPrivate","meta","parseMetaProperty","propertyName","SourceTypeModuleErrors","innerStartPos","innerStartLoc","spreadStart","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","innerEndPos","innerEndLoc","arrowNode","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","oldInPropertyName","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","errorPos","reservedTest","delegating","delegate","topicReferenceWasUsedInCurrentContext","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","StatementParser","interpreter","parseInterpreterDirective","isLetKeyword","endCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","parseVar","declarations","parseForIn","startsWithUnescapedName","isForOf","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","finalizer","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassElementName","maybeQuestionTokenStart","pushClassPrivateProperty","pushClassProperty","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","l","hasFrom","nextAfterFrom","assertions","maybeParseImportAssertions","checkNames","isDefault","isFrom","exportedName","nodes","isString","surrogate","toString","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importedIsString","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":"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"}