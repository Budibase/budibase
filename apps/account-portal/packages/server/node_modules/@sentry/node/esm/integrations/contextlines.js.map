{"version":3,"file":"contextlines.js","sourceRoot":"","sources":["../../../src/integrations/contextlines.ts"],"names":[],"mappings":"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","sourcesContent":["import { getCurrentHub } from '@sentry/core';\nimport { Event, EventProcessor, Integration, StackFrame } from '@sentry/types';\nimport { addContextToFrame } from '@sentry/utils';\nimport { readFile } from 'fs';\nimport { LRUMap } from 'lru_map';\n\nimport { NodeClient } from '../client';\n\nconst FILE_CONTENT_CACHE = new LRUMap<string, string | null>(100);\nconst DEFAULT_LINES_OF_CONTEXT = 7;\n\n// TODO: Replace with promisify when minimum supported node >= v8\nfunction readTextFileAsync(path: string): Promise<string> {\n  return new Promise((resolve, reject) => {\n    readFile(path, 'utf8', (err, data) => {\n      if (err) reject(err);\n      else resolve(data);\n    });\n  });\n}\n\n/**\n * Resets the file cache. Exists for testing purposes.\n * @hidden\n */\nexport function resetFileContentCache(): void {\n  FILE_CONTENT_CACHE.clear();\n}\n\ninterface ContextLinesOptions {\n  /**\n   * Sets the number of context lines for each frame when loading a file.\n   * Defaults to 7.\n   *\n   * Set to 0 to disable loading and inclusion of source files.\n   **/\n  frameContextLines?: number;\n}\n\n/** Add node modules / packages to the event */\nexport class ContextLines implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'ContextLines';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = ContextLines.id;\n\n  public constructor(private readonly _options: ContextLinesOptions = {}) {}\n\n  /** Get's the number of context lines to add */\n  private get _contextLines(): number {\n    // This is only here to copy frameContextLines from init options if it hasn't\n    // been set via this integrations constructor.\n    //\n    // TODO: Remove on next major!\n    if (this._options.frameContextLines === undefined) {\n      const initOptions = getCurrentHub().getClient<NodeClient>()?.getOptions();\n      // eslint-disable-next-line deprecation/deprecation\n      this._options.frameContextLines = initOptions?.frameContextLines;\n    }\n\n    return this._options.frameContextLines !== undefined ? this._options.frameContextLines : DEFAULT_LINES_OF_CONTEXT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void): void {\n    addGlobalEventProcessor(event => this.addSourceContext(event));\n  }\n\n  /** Processes an event and adds context lines */\n  public async addSourceContext(event: Event): Promise<Event> {\n    if (this._contextLines > 0 && event.exception?.values) {\n      for (const exception of event.exception.values) {\n        if (exception.stacktrace?.frames) {\n          await this.addSourceContextToFrames(exception.stacktrace.frames);\n        }\n      }\n    }\n\n    return event;\n  }\n\n  /** Adds context lines to frames */\n  public async addSourceContextToFrames(frames: StackFrame[]): Promise<void> {\n    const contextLines = this._contextLines;\n\n    for (const frame of frames) {\n      // Only add context if we have a filename and it hasn't already been added\n      if (frame.filename && frame.context_line === undefined) {\n        const sourceFile = await _readSourceFile(frame.filename);\n\n        if (sourceFile) {\n          try {\n            const lines = sourceFile.split('\\n');\n            addContextToFrame(lines, frame, contextLines);\n          } catch (e) {\n            // anomaly, being defensive in case\n            // unlikely to ever happen in practice but can definitely happen in theory\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Reads file contents and caches them in a global LRU cache.\n *\n * @param filename filepath to read content from.\n */\nasync function _readSourceFile(filename: string): Promise<string | null> {\n  const cachedFile = FILE_CONTENT_CACHE.get(filename);\n  // We have a cache hit\n  if (cachedFile !== undefined) {\n    return cachedFile;\n  }\n\n  let content: string | null = null;\n  try {\n    content = await readTextFileAsync(filename);\n  } catch (_) {\n    //\n  }\n\n  FILE_CONTENT_CACHE.set(filename, content);\n  return content;\n}\n"]}