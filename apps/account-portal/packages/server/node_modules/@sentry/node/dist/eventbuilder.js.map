{"version":3,"file":"eventbuilder.js","sourceRoot":"","sources":["../../src/eventbuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import { getCurrentHub } from '@sentry/hub';\nimport { Event, EventHint, Exception, Mechanism, Severity, StackFrame } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  createStackParser,\n  extractExceptionKeysForMessage,\n  isError,\n  isPlainObject,\n  normalizeToSize,\n} from '@sentry/utils';\n\nimport { nodeStackParser } from './stack-parser';\n\n/**\n * Extracts stack frames from the error.stack string\n */\nexport function parseStackFrames(error: Error): StackFrame[] {\n  return createStackParser(nodeStackParser)(error.stack || '', 1);\n}\n\n/**\n * Extracts stack frames from the error and builds a Sentry Exception\n */\nexport function exceptionFromError(error: Error): Exception {\n  const exception: Exception = {\n    type: error.name || error.constructor.name,\n    value: error.message,\n  };\n\n  const frames = parseStackFrames(error);\n  if (frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  return exception;\n}\n\n/**\n * Builds and Event from a Exception\n * @hidden\n */\nexport function eventFromUnknownInput(exception: unknown, hint?: EventHint): Event {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let ex: unknown = exception;\n  const providedMechanism: Mechanism | undefined =\n    hint && hint.data && (hint.data as { mechanism: Mechanism }).mechanism;\n  const mechanism: Mechanism = providedMechanism || {\n    handled: true,\n    type: 'generic',\n  };\n\n  if (!isError(exception)) {\n    if (isPlainObject(exception)) {\n      // This will allow us to group events based on top-level keys\n      // which is much better than creating new group when any key/value change\n      const message = `Non-Error exception captured with keys: ${extractExceptionKeysForMessage(exception)}`;\n\n      getCurrentHub().configureScope(scope => {\n        scope.setExtra('__serialized__', normalizeToSize(exception));\n      });\n\n      ex = (hint && hint.syntheticException) || new Error(message);\n      (ex as Error).message = message;\n    } else {\n      // This handles when someone does: `throw \"something awesome\";`\n      // We use synthesized Error here so we can extract a (rough) stack trace.\n      ex = (hint && hint.syntheticException) || new Error(exception as string);\n      (ex as Error).message = exception as string;\n    }\n    mechanism.synthetic = true;\n  }\n\n  const event = {\n    exception: {\n      values: [exceptionFromError(ex as Error)],\n    },\n  };\n\n  addExceptionTypeValue(event, undefined, undefined);\n  addExceptionMechanism(event, mechanism);\n\n  return {\n    ...event,\n    event_id: hint && hint.event_id,\n  };\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nexport function eventFromMessage(\n  message: string,\n  level: Severity = Severity.Info,\n  hint?: EventHint,\n  attachStacktrace?: boolean,\n): Event {\n  const event: Event = {\n    event_id: hint && hint.event_id,\n    level,\n    message,\n  };\n\n  if (attachStacktrace && hint && hint.syntheticException) {\n    const frames = parseStackFrames(hint.syntheticException);\n    if (frames.length) {\n      event.stacktrace = { frames };\n    }\n  }\n\n  return event;\n}\n"]}