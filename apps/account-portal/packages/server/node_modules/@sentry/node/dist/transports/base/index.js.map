{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/transports/base/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { APIDetails, getRequestHeaders, initAPIDetails, SDK_VERSION } from '@sentry/core';\nimport {\n  DsnProtocol,\n  Event,\n  Response,\n  SentryRequest,\n  SentryRequestType,\n  Session,\n  SessionAggregates,\n  Transport,\n  TransportOptions,\n} from '@sentry/types';\nimport {\n  eventStatusFromHttpCode,\n  logger,\n  makePromiseBuffer,\n  parseRetryAfterHeader,\n  PromiseBuffer,\n  SentryError,\n} from '@sentry/utils';\nimport * as fs from 'fs';\nimport * as http from 'http';\nimport * as https from 'https';\nimport { URL } from 'url';\n\nimport { IS_DEBUG_BUILD } from '../../flags';\nimport { SDK_NAME } from '../../version';\nimport { HTTPModule } from './http-module';\n\nexport type URLParts = Pick<URL, 'hostname' | 'pathname' | 'port' | 'protocol'>;\nexport type UrlParser = (url: string) => URLParts;\n\nconst CATEGORY_MAPPING: {\n  [key in SentryRequestType]: string;\n} = {\n  event: 'error',\n  transaction: 'transaction',\n  session: 'session',\n  attachment: 'attachment',\n};\n\n/** Base Transport class implementation */\nexport abstract class BaseTransport implements Transport {\n  /** The Agent used for corresponding transport */\n  public module?: HTTPModule;\n\n  /** The Agent used for corresponding transport */\n  public client?: http.Agent | https.Agent;\n\n  /** API object */\n  protected _api: APIDetails;\n\n  /** A simple buffer holding all requests. */\n  protected readonly _buffer: PromiseBuffer<Response> = makePromiseBuffer(30);\n\n  /** Locks transport after receiving rate limits in a response */\n  protected readonly _rateLimits: Record<string, Date> = {};\n\n  /** Create instance and set this.dsn */\n  public constructor(public options: TransportOptions) {\n    // eslint-disable-next-line deprecation/deprecation\n    this._api = initAPIDetails(options.dsn, options._metadata, options.tunnel);\n  }\n\n  /** Default function used to parse URLs */\n  public urlParser: UrlParser = url => new URL(url);\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(_: Event): PromiseLike<Response> {\n    throw new SentryError('Transport Class has to implement `sendEvent` method.');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this._buffer.drain(timeout);\n  }\n\n  /**\n   * Extracts proxy settings from client options and env variables.\n   *\n   * Honors `no_proxy` env variable with the highest priority to allow for hosts exclusion.\n   *\n   * An order of priority for available protocols is:\n   * `http`  => `options.httpProxy` | `process.env.http_proxy`\n   * `https` => `options.httpsProxy` | `options.httpProxy` | `process.env.https_proxy` | `process.env.http_proxy`\n   */\n  protected _getProxy(protocol: DsnProtocol): string | undefined {\n    const { no_proxy, http_proxy, https_proxy } = process.env;\n    const { httpProxy, httpsProxy } = this.options;\n    const proxy = protocol === 'http' ? httpProxy || http_proxy : httpsProxy || httpProxy || https_proxy || http_proxy;\n\n    if (!no_proxy) {\n      return proxy;\n    }\n\n    const { host, port } = this._api.dsn;\n    for (const np of no_proxy.split(',')) {\n      if (host.endsWith(np) || `${host}:${port}`.endsWith(np)) {\n        return;\n      }\n    }\n\n    return proxy;\n  }\n\n  /** Returns a build request option object used by request */\n  protected _getRequestOptions(urlParts: URLParts): http.RequestOptions | https.RequestOptions {\n    const headers = {\n      ...getRequestHeaders(this._api.dsn, SDK_NAME, SDK_VERSION),\n      ...this.options.headers,\n    };\n    const { hostname, pathname, port, protocol } = urlParts;\n    // See https://github.com/nodejs/node/blob/38146e717fed2fabe3aacb6540d839475e0ce1c6/lib/internal/url.js#L1268-L1290\n    // We ignore the query string on purpose\n    const path = `${pathname}`;\n\n    return {\n      agent: this.client,\n      headers,\n      hostname,\n      method: 'POST',\n      path,\n      port,\n      protocol,\n      ...(this.options.caCerts && {\n        ca: fs.readFileSync(this.options.caCerts),\n      }),\n    };\n  }\n\n  /**\n   * Gets the time that given category is disabled until for rate limiting\n   */\n  protected _disabledUntil(requestType: SentryRequestType): Date {\n    const category = CATEGORY_MAPPING[requestType];\n    return this._rateLimits[category] || this._rateLimits.all;\n  }\n\n  /**\n   * Checks if a category is rate limited\n   */\n  protected _isRateLimited(requestType: SentryRequestType): boolean {\n    return this._disabledUntil(requestType) > new Date(Date.now());\n  }\n\n  /**\n   * Sets internal _rateLimits from incoming headers. Returns true if headers contains a non-empty rate limiting header.\n   */\n  protected _handleRateLimit(headers: Record<string, string | null>): boolean {\n    const now = Date.now();\n    const rlHeader = headers['x-sentry-rate-limits'];\n    const raHeader = headers['retry-after'];\n\n    if (rlHeader) {\n      // rate limit headers are of the form\n      //     <header>,<header>,..\n      // where each <header> is of the form\n      //     <retry_after>: <categories>: <scope>: <reason_code>\n      // where\n      //     <retry_after> is a delay in ms\n      //     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n      //         <category>;<category>;...\n      //     <scope> is what's being limited (org, project, or key) - ignored by SDK\n      //     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n      for (const limit of rlHeader.trim().split(',')) {\n        const parameters = limit.split(':', 2);\n        const headerDelay = parseInt(parameters[0], 10);\n        const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n        for (const category of (parameters[1] && parameters[1].split(';')) || ['all']) {\n          // categoriesAllowed is added here to ensure we are only storing rate limits for categories we support in this\n          // sdk and any categories that are not supported will not be added redundantly to the rateLimits object\n          const categoriesAllowed = [\n            ...(Object.keys(CATEGORY_MAPPING) as [SentryRequestType]).map(k => CATEGORY_MAPPING[k]),\n            'all',\n          ];\n          if (categoriesAllowed.includes(category)) this._rateLimits[category] = new Date(now + delay);\n        }\n      }\n      return true;\n    } else if (raHeader) {\n      this._rateLimits.all = new Date(now + parseRetryAfterHeader(raHeader, now));\n      return true;\n    }\n    return false;\n  }\n\n  /** JSDoc */\n  protected async _send(\n    sentryRequest: SentryRequest,\n    originalPayload?: Event | Session | SessionAggregates,\n  ): Promise<Response> {\n    if (!this.module) {\n      throw new SentryError('No module available');\n    }\n    if (originalPayload && this._isRateLimited(sentryRequest.type)) {\n      return Promise.reject({\n        payload: originalPayload,\n        type: sentryRequest.type,\n        reason: `Transport for ${sentryRequest.type} requests locked till ${this._disabledUntil(\n          sentryRequest.type,\n        )} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    return this._buffer.add(\n      () =>\n        new Promise<Response>((resolve, reject) => {\n          if (!this.module) {\n            throw new SentryError('No module available');\n          }\n          const options = this._getRequestOptions(this.urlParser(sentryRequest.url));\n          const req = this.module.request(options, res => {\n            const statusCode = res.statusCode || 500;\n            const status = eventStatusFromHttpCode(statusCode);\n\n            res.setEncoding('utf8');\n\n            /**\n             * \"Key-value pairs of header names and values. Header names are lower-cased.\"\n             * https://nodejs.org/api/http.html#http_message_headers\n             */\n            let retryAfterHeader = res.headers ? res.headers['retry-after'] : '';\n            retryAfterHeader = (Array.isArray(retryAfterHeader) ? retryAfterHeader[0] : retryAfterHeader) as string;\n\n            let rlHeader = res.headers ? res.headers['x-sentry-rate-limits'] : '';\n            rlHeader = (Array.isArray(rlHeader) ? rlHeader[0] : rlHeader) as string;\n\n            const headers = {\n              'x-sentry-rate-limits': rlHeader,\n              'retry-after': retryAfterHeader,\n            };\n\n            const limited = this._handleRateLimit(headers);\n            if (limited)\n              IS_DEBUG_BUILD &&\n                logger.warn(\n                  `Too many ${sentryRequest.type} requests, backing off until: ${this._disabledUntil(\n                    sentryRequest.type,\n                  )}`,\n                );\n\n            if (status === 'success') {\n              resolve({ status });\n            } else {\n              let rejectionMessage = `HTTP Error (${statusCode})`;\n              if (res.headers && res.headers['x-sentry-error']) {\n                rejectionMessage += `: ${res.headers['x-sentry-error']}`;\n              }\n              reject(new SentryError(rejectionMessage));\n            }\n\n            // Force the socket to drain\n            res.on('data', () => {\n              // Drain\n            });\n            res.on('end', () => {\n              // Drain\n            });\n          });\n          req.on('error', reject);\n          req.end(sentryRequest.body);\n        }),\n    );\n  }\n}\n"]}