{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../src/logger.ts"],"names":[],"mappings":";AAEA,OAAO,EAAE,cAAc,EAAE,MAAM,SAAS,CAAC;AACzC,OAAO,EAAE,eAAe,EAAE,kBAAkB,EAAE,MAAM,UAAU,CAAC;AAE/D,+DAA+D;AAC/D,IAAM,MAAM,GAAG,eAAe,EAA0B,CAAC;AAEzD,iCAAiC;AACjC,IAAM,MAAM,GAAG,gBAAgB,CAAC;AAEhC,MAAM,CAAC,IAAM,cAAc,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAU,CAAC;AAW3F;;;;;GAKG;AACH,MAAM,UAAU,cAAc,CAAI,QAAiB;IACjD,IAAM,MAAM,GAAG,eAAe,EAAU,CAAC;IAEzC,IAAI,CAAC,CAAC,SAAS,IAAI,MAAM,CAAC,EAAE;QAC1B,OAAO,QAAQ,EAAE,CAAC;KACnB;IAED,IAAM,eAAe,GAAG,MAAM,CAAC,OAA4C,CAAC;IAC5E,IAAM,aAAa,GAAkC,EAAE,CAAC;IAExD,sCAAsC;IACtC,cAAc,CAAC,OAAO,CAAC,UAAA,KAAK;QAC1B,6DAA6D;QAC7D,IAAM,mBAAmB,GACvB,eAAe,CAAC,KAAK,CAAC,IAAK,eAAe,CAAC,KAAK,CAAqB,CAAC,mBAAmB,CAAC;QAC5F,IAAI,KAAK,IAAI,MAAM,CAAC,OAAO,IAAI,mBAAmB,EAAE;YAClD,aAAa,CAAC,KAAK,CAAC,GAAG,eAAe,CAAC,KAAK,CAAuC,CAAC;YACpF,eAAe,CAAC,KAAK,CAAC,GAAG,mBAA4C,CAAC;SACvE;IACH,CAAC,CAAC,CAAC;IAEH,IAAI;QACF,OAAO,QAAQ,EAAE,CAAC;KACnB;YAAS;QACR,sCAAsC;QACtC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,UAAA,KAAK;YACtC,eAAe,CAAC,KAAK,CAAC,GAAG,aAAa,CAAC,KAAsC,CAAC,CAAC;QACjF,CAAC,CAAC,CAAC;KACJ;AACH,CAAC;AAED,SAAS,UAAU;IACjB,IAAI,OAAO,GAAG,KAAK,CAAC;IACpB,IAAM,MAAM,GAAoB;QAC9B,MAAM,EAAE;YACN,OAAO,GAAG,IAAI,CAAC;QACjB,CAAC;QACD,OAAO,EAAE;YACP,OAAO,GAAG,KAAK,CAAC;QAClB,CAAC;KACF,CAAC;IAEF,IAAI,cAAc,EAAE;QAClB,cAAc,CAAC,OAAO,CAAC,UAAA,IAAI;YACzB,8DAA8D;YAC9D,MAAM,CAAC,IAAI,CAAC,GAAG;gBAAC,cAAc;qBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;oBAAd,yBAAc;;gBAC5B,IAAI,OAAO,EAAE;oBACX,cAAc,CAAC;;wBACb,CAAA,KAAA,MAAM,CAAC,OAAO,CAAA,CAAC,IAAI,CAAC,qBAAI,MAAM,SAAI,IAAI,OAAI,GAAK,IAAI,GAAE;oBACvD,CAAC,CAAC,CAAC;iBACJ;YACH,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;KACJ;SAAM;QACL,cAAc,CAAC,OAAO,CAAC,UAAA,IAAI;YACzB,MAAM,CAAC,IAAI,CAAC,GAAG,cAAM,OAAA,SAAS,EAAT,CAAS,CAAC;QACjC,CAAC,CAAC,CAAC;KACJ;IAED,OAAO,MAAgB,CAAC;AAC1B,CAAC;AAED,0GAA0G;AAC1G,IAAI,MAAc,CAAC;AACnB,IAAI,cAAc,EAAE;IAClB,MAAM,GAAG,kBAAkB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;CACnD;KAAM;IACL,MAAM,GAAG,UAAU,EAAE,CAAC;CACvB;AAED,OAAO,EAAE,MAAM,EAAE,CAAC","sourcesContent":["import { WrappedFunction } from '@sentry/types';\n\nimport { IS_DEBUG_BUILD } from './flags';\nimport { getGlobalObject, getGlobalSingleton } from './global';\n\n// TODO: Implement different loggers for different environments\nconst global = getGlobalObject<Window | NodeJS.Global>();\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\nexport const CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert'] as const;\n\ntype LoggerMethod = (...args: unknown[]) => void;\ntype LoggerConsoleMethods = Record<typeof CONSOLE_LEVELS[number], LoggerMethod>;\n\n/** JSDoc */\ninterface Logger extends LoggerConsoleMethods {\n  disable(): void;\n  enable(): void;\n}\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox<T>(callback: () => T): T {\n  const global = getGlobalObject<Window>();\n\n  if (!('console' in global)) {\n    return callback();\n  }\n\n  const originalConsole = global.console as Console & Record<string, unknown>;\n  const wrappedLevels: Partial<LoggerConsoleMethods> = {};\n\n  // Restore all wrapped console methods\n  CONSOLE_LEVELS.forEach(level => {\n    // TODO(v7): Remove this check as it's only needed for Node 6\n    const originalWrappedFunc =\n      originalConsole[level] && (originalConsole[level] as WrappedFunction).__sentry_original__;\n    if (level in global.console && originalWrappedFunc) {\n      wrappedLevels[level] = originalConsole[level] as LoggerConsoleMethods[typeof level];\n      originalConsole[level] = originalWrappedFunc as Console[typeof level];\n    }\n  });\n\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    Object.keys(wrappedLevels).forEach(level => {\n      originalConsole[level] = wrappedLevels[level as typeof CONSOLE_LEVELS[number]];\n    });\n  }\n}\n\nfunction makeLogger(): Logger {\n  let enabled = false;\n  const logger: Partial<Logger> = {\n    enable: () => {\n      enabled = true;\n    },\n    disable: () => {\n      enabled = false;\n    },\n  };\n\n  if (IS_DEBUG_BUILD) {\n    CONSOLE_LEVELS.forEach(name => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      logger[name] = (...args: any[]) => {\n        if (enabled) {\n          consoleSandbox(() => {\n            global.console[name](`${PREFIX}[${name}]:`, ...args);\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = () => undefined;\n    });\n  }\n\n  return logger as Logger;\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nlet logger: Logger;\nif (IS_DEBUG_BUILD) {\n  logger = getGlobalSingleton('logger', makeLogger);\n} else {\n  logger = makeLogger();\n}\n\nexport { logger };\n"]}