{"version":3,"file":"normalize.js","sourceRoot":"","sources":["../../src/normalize.ts"],"names":[],"mappings":"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","sourcesContent":["import { Primitive } from '@sentry/types';\n\nimport { isError, isEvent, isNaN, isSyntheticEvent } from './is';\nimport { memoBuilder, MemoFunc } from './memo';\nimport { convertToPlainObject } from './object';\nimport { getFunctionName } from './stacktrace';\n\ntype Prototype = { constructor: (...args: unknown[]) => unknown };\n// This is a hack to placate TS, relying on the fact that technically, arrays are objects with integer keys. Normally we\n// think of those keys as actual numbers, but `arr['0']` turns out to work just as well as `arr[0]`, and doing it this\n// way lets us use a single type in the places where behave as if we are only dealing with objects, even if some of them\n// might be arrays.\ntype ObjOrArray<T> = { [key: string]: T };\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normallized output..\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */\nexport function normalize(input: unknown, depth: number = +Infinity, maxProperties: number = +Infinity): any {\n  try {\n    // since we're at the outermost level, there is no key\n    return visit('', input, depth, maxProperties);\n  } catch (err) {\n    return { ERROR: `**non-serializable** (${err})` };\n  }\n}\n\n/** JSDoc */\nexport function normalizeToSize<T>(\n  object: { [key: string]: any },\n  // Default Node.js REPL depth\n  depth: number = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize: number = 100 * 1024,\n): T {\n  const normalized = normalize(object, depth);\n\n  if (jsonSize(normalized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return normalized as T;\n}\n\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */\nfunction visit(\n  key: string,\n  value: unknown,\n  depth: number = +Infinity,\n  maxProperties: number = +Infinity,\n  memo: MemoFunc = memoBuilder(),\n): Primitive | ObjOrArray<unknown> {\n  const [memoize, unmemoize] = memo;\n\n  // If the value has a `toJSON` method, see if we can bail and let it do the work\n  const valueWithToJSON = value as unknown & { toJSON?: () => Primitive | ObjOrArray<unknown> };\n  if (valueWithToJSON && typeof valueWithToJSON.toJSON === 'function') {\n    try {\n      return valueWithToJSON.toJSON();\n    } catch (err) {\n      // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n    }\n  }\n\n  // Get the simple cases out of the way first\n  if (value === null || (['number', 'boolean', 'string'].includes(typeof value) && !isNaN(value))) {\n    return value as Primitive;\n  }\n\n  const stringified = stringifyValue(key, value);\n\n  // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n  // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n  if (!stringified.startsWith('[object ')) {\n    return stringified;\n  }\n\n  // We're also done if we've reached the max depth\n  if (depth === 0) {\n    // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n    return stringified.replace('object ', '');\n  }\n\n  // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n  if (memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n  // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n  // property/entry, and keep track of the number of items we add to it.\n  const normalized = (Array.isArray(value) ? [] : {}) as ObjOrArray<unknown>;\n  let numAdded = 0;\n\n  // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n  // properties are non-enumerable and otherwise would get missed.\n  const visitable = (isError(value) || isEvent(value) ? convertToPlainObject(value) : value) as ObjOrArray<unknown>;\n\n  for (const visitKey in visitable) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n      continue;\n    }\n\n    if (numAdded >= maxProperties) {\n      normalized[visitKey] = '[MaxProperties ~]';\n      break;\n    }\n\n    // Recursively visit all the child nodes\n    const visitValue = visitable[visitKey];\n    normalized[visitKey] = visit(visitKey, visitValue, depth - 1, maxProperties, memo);\n\n    numAdded += 1;\n  }\n\n  // Once we've visited all the branches, remove the parent from memo storage\n  unmemoize(value);\n\n  // Return accumulated values\n  return normalized;\n}\n\n// TODO remove this in v7 (this means the method will no longer be exported, under any name)\nexport { visit as walk };\n\n/**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */\nfunction stringifyValue(\n  key: unknown,\n  // this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n  // our internal use, it'll do\n  value: Exclude<unknown, string | number | boolean | null>,\n): string {\n  try {\n    if (key === 'domain' && value && typeof value === 'object' && (value as { _events: unknown })._events) {\n      return '[Domain]';\n    }\n\n    if (key === 'domainEmitter') {\n      return '[DomainEmitter]';\n    }\n\n    // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n    // which won't throw if they are not present.\n\n    if (typeof global !== 'undefined' && value === global) {\n      return '[Global]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof window !== 'undefined' && value === window) {\n      return '[Window]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof document !== 'undefined' && value === document) {\n      return '[Document]';\n    }\n\n    // React's SyntheticEvent thingy\n    if (isSyntheticEvent(value)) {\n      return '[SyntheticEvent]';\n    }\n\n    if (typeof value === 'number' && value !== value) {\n      return '[NaN]';\n    }\n\n    // this catches `undefined` (but not `null`, which is a primitive and can be serialized on its own)\n    if (value === void 0) {\n      return '[undefined]';\n    }\n\n    if (typeof value === 'function') {\n      return `[Function: ${getFunctionName(value)}]`;\n    }\n\n    if (typeof value === 'symbol') {\n      return `[${String(value)}]`;\n    }\n\n    // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n    if (typeof value === 'bigint') {\n      return `[BigInt: ${String(value)}]`;\n    }\n\n    // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n    // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n    // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n    // we can make sure that only plain objects come out that way.\n    return `[object ${(Object.getPrototypeOf(value) as Prototype).constructor.name}]`;\n  } catch (err) {\n    return `**non-serializable** (${err})`;\n  }\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value: string): number {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n"]}