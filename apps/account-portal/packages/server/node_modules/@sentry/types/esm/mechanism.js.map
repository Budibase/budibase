{"version":3,"file":"mechanism.js","sourceRoot":"","sources":["../../src/mechanism.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * Metadata about a captured exception, intended to provide a hint as to the means by which it was captured.\n */\nexport interface Mechanism {\n  /**\n   * For now, restricted to `onerror`, `onunhandledrejection` (both obvious), `instrument` (the result of\n   * auto-instrumentation), and `generic` (everything else). Converted to a tag on ingest.\n   */\n  type: string;\n\n  /**\n   * In theory, whether or not the exception has been handled by the user. In practice, whether or not we see it before\n   * it hits the global error/rejection handlers, whether through explicit handling by the user or auto instrumentation.\n   * Converted to a tag on ingest and used in various ways in the UI.\n   */\n  handled: boolean;\n\n  /**\n   * Arbitrary data to be associated with the mechanism (for example, errors coming from event handlers include the\n   * handler name and the event target. Will show up in the UI directly above the stacktrace.\n   */\n  data?: {\n    [key: string]: string | boolean;\n  };\n\n  /**\n   * True when `captureException` is called with anything other than an instance of `Error` (or, in the case of browser,\n   * an instance of `ErrorEvent`, `DOMError`, or `DOMException`). causing us to create a synthetic error in an attempt\n   * to recreate the stacktrace.\n   */\n  synthetic?: boolean;\n}\n"]}