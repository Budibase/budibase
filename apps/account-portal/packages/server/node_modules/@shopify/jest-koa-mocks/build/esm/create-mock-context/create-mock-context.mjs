import { objectSpread2 as _objectSpread2 } from '../_virtual/_rollupPluginBabelHelpers.mjs';
import { URL } from 'url';
import stream from 'stream';
import httpMocks from 'node-mocks-http';
import Koa from 'koa';
import createMockCookies from '../create-mock-cookies/create-mock-cookies.mjs';

function createContext(options = {}) {
  const app = new Koa();
  const {
    cookies,
    method,
    statusCode,
    session,
    requestBody,
    rawBody = '',
    url = '',
    host = 'test.com',
    encrypted = false,
    throw: throwFn = jest.fn(),
    redirect = jest.fn(),
    headers = {},
    state = {},
    customProperties = {}
  } = options;

  const extensions = _objectSpread2(_objectSpread2({}, customProperties), {}, {
    throw: throwFn,
    session,
    redirect,
    state
  });

  const protocolFallback = encrypted ? 'https' : 'http';
  const urlObject = new URL(url, `${protocolFallback}://${host}`);
  const req = httpMocks.createRequest({
    url: urlObject.toString(),
    method,
    statusCode,
    session,
    headers: _objectSpread2({
      // Koa determines protocol based on the `Host` header.
      Host: urlObject.host
    }, headers)
  }); // Some functions we call in the implementations will perform checks for `req.encrypted`, which delegates to the socket.
  // MockRequest doesn't set a fake socket itself, so we create one here.

  req.socket = new stream.Duplex();
  Object.defineProperty(req.socket, 'encrypted', {
    writable: false,
    value: urlObject.protocol === 'https:'
  });
  const res = httpMocks.createResponse(); // Koa sets a default status code of 404, not the node default of 200
  // https://github.com/koajs/koa/blob/master/docs/api/response.md#responsestatus

  res.statusCode = 404; // This is to get around an odd behavior in the `cookies` library, where if `res.set` is defined, it will use an internal
  // node function to set headers, which results in them being set in the wrong place.

  res.set = undefined;
  const context = app.createContext(req, res);
  Object.assign(context, extensions);
  context.cookies = createMockCookies(cookies); // ctx.request.body is a common enough custom property for middleware to add that it's handy to just support it by default

  context.request.body = requestBody;
  context.request.rawBody = rawBody;
  return context;
}

export { createContext as default };
