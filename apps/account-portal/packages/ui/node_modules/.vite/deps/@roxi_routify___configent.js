import {
  require_path
} from "./chunk-6P42AMXB.js";
import {
  require_fs
} from "./chunk-RJQ5QLWH.js";
import {
  __commonJS,
  __require
} from "./chunk-OROXOI2D.js";

// ../../../../node_modules/dotenv/lib/main.js
var require_main = __commonJS({
  "../../../../node_modules/dotenv/lib/main.js"(exports, module) {
    var fs = require_fs();
    var path = require_path();
    function log(message) {
      console.log(`[dotenv][DEBUG] ${message}`);
    }
    var NEWLINE = "\n";
    var RE_INI_KEY_VAL = /^\s*([\w.-]+)\s*=\s*(.*)?\s*$/;
    var RE_NEWLINES = /\\n/g;
    var NEWLINES_MATCH = /\n|\r|\r\n/;
    function parse(src, options) {
      const debug = Boolean(options && options.debug);
      const obj = {};
      src.toString().split(NEWLINES_MATCH).forEach(function(line, idx) {
        const keyValueArr = line.match(RE_INI_KEY_VAL);
        if (keyValueArr != null) {
          const key = keyValueArr[1];
          let val = keyValueArr[2] || "";
          const end = val.length - 1;
          const isDoubleQuoted = val[0] === '"' && val[end] === '"';
          const isSingleQuoted = val[0] === "'" && val[end] === "'";
          if (isSingleQuoted || isDoubleQuoted) {
            val = val.substring(1, end);
            if (isDoubleQuoted) {
              val = val.replace(RE_NEWLINES, NEWLINE);
            }
          } else {
            val = val.trim();
          }
          obj[key] = val;
        } else if (debug) {
          log(`did not match key and value when parsing line ${idx + 1}: ${line}`);
        }
      });
      return obj;
    }
    function config(options) {
      let dotenvPath = path.resolve(process.cwd(), ".env");
      let encoding = "utf8";
      let debug = false;
      if (options) {
        if (options.path != null) {
          dotenvPath = options.path;
        }
        if (options.encoding != null) {
          encoding = options.encoding;
        }
        if (options.debug != null) {
          debug = true;
        }
      }
      try {
        const parsed = parse(fs.readFileSync(dotenvPath, { encoding }), { debug });
        Object.keys(parsed).forEach(function(key) {
          if (!Object.prototype.hasOwnProperty.call(process.env, key)) {
            process.env[key] = parsed[key];
          } else if (debug) {
            log(`"${key}" is already defined in \`process.env\` and will not be overwritten`);
          }
        });
        return { parsed };
      } catch (e) {
        return { error: e };
      }
    }
    module.exports.config = config;
    module.exports.parse = parse;
  }
});

// ../../../../node_modules/configent/configent.js
var require_configent = __commonJS({
  "../../../../node_modules/configent/configent.js"(exports, module) {
    var { existsSync, readdirSync } = require_fs();
    var { resolve, dirname } = require_path();
    var instances = {};
    var detectedFromDefaults = {};
    var _defaults = {
      name: "",
      cacheConfig: true,
      cacheDetectedDefaults: true,
      useDotEnv: true,
      useEnv: true,
      usePackageConfig: true,
      useConfig: true,
      useDetectDefaults: false,
      detectDefaultsConfigPath: "configs",
      sanitizeEnvValue: (str) => str.replace(/[-_][a-z]/g, (str2) => str2.substr(1).toUpperCase())
    };
    function configent(defaults, input = {}, configentOptions) {
      configentOptions = { ..._defaults, ...configentOptions };
      const getParentModuleDir = createGetParentModuleDir(configentOptions);
      configentOptions.name = configentOptions.name || __require(resolve(getParentModuleDir(), "package.json")).name;
      const {
        name,
        cacheConfig,
        cacheDetectedDefaults,
        useDotEnv,
        sanitizeEnvValue,
        useConfig,
        useEnv,
        usePackageConfig,
        useDetectDefaults,
        detectDefaultsConfigPath
      } = configentOptions;
      const upperCaseRE = new RegExp(`^${name.toUpperCase()}_`);
      return buildConfig();
      function buildConfig() {
        delete configentOptions.module;
        const hash = JSON.stringify({ name, defaults, input, configentOptions });
        if (!instances[hash] || !cacheConfig) {
          instances[hash] = {
            ...defaults,
            ...useDetectDefaults && getDetectDefaults(),
            ...usePackageConfig && getPackageConfig(),
            ...useConfig && getUserConfig(),
            ...useEnv && getEnvConfig(),
            ...input
          };
        }
        return instances[hash];
      }
      function getEnvConfig() {
        useDotEnv && require_main().config();
        const entries = Object.entries(process.env).filter(([key]) => key.match(upperCaseRE)).map(parseField);
        if (entries.length)
          return entries.reduce((prev, { key, value }) => ({ ...prev, [key]: value }), {});
        function parseField([key, value]) {
          const shouldParseValue = (k) => typeof defaults[k] === "object";
          key = sanitizeEnvValue(key.replace(upperCaseRE, ""));
          value = shouldParseValue(key) ? JSON.parse(value) : value;
          return { key, value };
        }
      }
      function getUserConfig() {
        const path = resolve(process.cwd(), `${name}.config.js`);
        return existsSync(path) ? __require(path) : {};
      }
      function getPackageConfig() {
        const path = resolve(process.cwd(), "package.json");
        return existsSync(path) && __require(path)[name];
      }
      function getDetectDefaults() {
        const hash = JSON.stringify({ name, path: module["parent"].path });
        if (!detectedFromDefaults[hash] || !cacheDetectedDefaults) {
          const pkgjson = { dependencies: {}, devDependencies: {} };
          if (existsSync("package.json")) {
            Object.assign(pkgjson, __require(resolve(process.cwd(), "package.json")));
          }
          Object.assign(pkgjson.dependencies, pkgjson.devDependencies);
          const unsortedConfigTemplates = readdirSync(resolve(getParentModuleDir(), detectDefaultsConfigPath)).map((file) => ({
            file,
            ...__require(resolve(getParentModuleDir(), detectDefaultsConfigPath, file))
          }));
          const configTemplates = sortBySupersedings(unsortedConfigTemplates).filter((configTemplate) => configTemplate.condition({ pkgjson })).reverse();
          if (configTemplates) {
            if (configTemplates.length > 1)
              console.log(`[%s] detected defaults from %s`, name, configTemplates.filter((template) => template.file !== "default.config.js").map((template) => template.name).join(", "));
            detectedFromDefaults[hash] = Object.assign({}, ...configTemplates.map((template) => template.config({ pkgjson })));
          }
        }
        return detectedFromDefaults[hash];
      }
    }
    module.exports = { configent };
    function sortBySupersedings(arr) {
      arr = [...arr];
      const sorted = [];
      while (arr.length) {
        let foundMatch = false;
        const supersedings = [].concat(...arr.map((entry) => entry.supersedes || []));
        for (const [index, entry] of arr.entries()) {
          const file = entry.file.replace(/\.config\.js/, "");
          if (!supersedings.includes(file)) {
            sorted.push(...arr.splice(index, 1));
            foundMatch = true;
            break;
          }
        }
        if (!foundMatch)
          throw Error("Looks like you have circular supersedings \n" + arr.map((f) => `${f.file} supersedes ${f.supersedes}`).join("\n"));
      }
      return sorted;
    }
    function createGetParentModuleDir(options) {
      const { module: module2 } = options;
      let parentModuleDir;
      return () => {
        parentModuleDir = parentModuleDir || _getParentModuleDir(module2 && module2.path);
        return parentModuleDir;
      };
    }
    function _getParentModuleDir(path) {
      if (!path) {
        const modules = Object.values(__require.cache).filter((m) => m.children.includes(module));
        if (modules.length >= 2)
          missingModuleError(modules);
        else
          path = modules[0].path;
      }
      return existsSync(resolve(path, "package.json")) ? path : _getParentModuleDir(dirname(path));
    }
    function missingModuleError(modules) {
      const paths = modules.map((m) => _getParentModuleDir(m.path));
      throw new Error([
        `if multiple packages are using configent, they all need to provide the module.`,
        `Packages using configent: `,
        ...paths.map((p) => "- " + p),
        `Updating the packages may fix the problem.`,
        ""
      ].join("\n"));
    }
  }
});
export default require_configent();
//# sourceMappingURL=@roxi_routify___configent.js.map
