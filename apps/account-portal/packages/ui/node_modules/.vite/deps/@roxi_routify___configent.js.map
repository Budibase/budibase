{
  "version": 3,
  "sources": ["../../../../../../../node_modules/dotenv/lib/main.js", "../../../../../../../node_modules/configent/configent.js"],
  "sourcesContent": ["/* @flow */\n/*::\n\ntype DotenvParseOptions = {\n  debug?: boolean\n}\n\n// keys and values from src\ntype DotenvParseOutput = { [string]: string }\n\ntype DotenvConfigOptions = {\n  path?: string, // path to .env file\n  encoding?: string, // encoding of .env file\n  debug?: string // turn on logging for debugging purposes\n}\n\ntype DotenvConfigOutput = {\n  parsed?: DotenvParseOutput,\n  error?: Error\n}\n\n*/\n\nconst fs = require('fs')\nconst path = require('path')\n\nfunction log (message /*: string */) {\n  console.log(`[dotenv][DEBUG] ${message}`)\n}\n\nconst NEWLINE = '\\n'\nconst RE_INI_KEY_VAL = /^\\s*([\\w.-]+)\\s*=\\s*(.*)?\\s*$/\nconst RE_NEWLINES = /\\\\n/g\nconst NEWLINES_MATCH = /\\n|\\r|\\r\\n/\n\n// Parses src into an Object\nfunction parse (src /*: string | Buffer */, options /*: ?DotenvParseOptions */) /*: DotenvParseOutput */ {\n  const debug = Boolean(options && options.debug)\n  const obj = {}\n\n  // convert Buffers before splitting into lines and processing\n  src.toString().split(NEWLINES_MATCH).forEach(function (line, idx) {\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    const keyValueArr = line.match(RE_INI_KEY_VAL)\n    // matched?\n    if (keyValueArr != null) {\n      const key = keyValueArr[1]\n      // default undefined or missing values to empty string\n      let val = (keyValueArr[2] || '')\n      const end = val.length - 1\n      const isDoubleQuoted = val[0] === '\"' && val[end] === '\"'\n      const isSingleQuoted = val[0] === \"'\" && val[end] === \"'\"\n\n      // if single or double quoted, remove quotes\n      if (isSingleQuoted || isDoubleQuoted) {\n        val = val.substring(1, end)\n\n        // if double quoted, expand newlines\n        if (isDoubleQuoted) {\n          val = val.replace(RE_NEWLINES, NEWLINE)\n        }\n      } else {\n        // remove surrounding whitespace\n        val = val.trim()\n      }\n\n      obj[key] = val\n    } else if (debug) {\n      log(`did not match key and value when parsing line ${idx + 1}: ${line}`)\n    }\n  })\n\n  return obj\n}\n\n// Populates process.env from .env file\nfunction config (options /*: ?DotenvConfigOptions */) /*: DotenvConfigOutput */ {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding /*: string */ = 'utf8'\n  let debug = false\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = options.path\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n    if (options.debug != null) {\n      debug = true\n    }\n  }\n\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = parse(fs.readFileSync(dotenvPath, { encoding }), { debug })\n\n    Object.keys(parsed).forEach(function (key) {\n      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {\n        process.env[key] = parsed[key]\n      } else if (debug) {\n        log(`\"${key}\" is already defined in \\`process.env\\` and will not be overwritten`)\n      }\n    })\n\n    return { parsed }\n  } catch (e) {\n    return { error: e }\n  }\n}\n\nmodule.exports.config = config\nmodule.exports.parse = parse\n", "const { existsSync, readdirSync } = require('fs')\r\nconst { resolve, dirname } = require('path')\r\nlet instances = {}\r\nlet detectedFromDefaults = {}\r\n\r\nconst _defaults = {\r\n    name: '',\r\n    cacheConfig: true,\r\n    cacheDetectedDefaults: true,\r\n    useDotEnv: true,\r\n    useEnv: true,\r\n    usePackageConfig: true,\r\n    useConfig: true,\r\n    useDetectDefaults: false,\r\n    detectDefaultsConfigPath: 'configs',\r\n    sanitizeEnvValue: str => str.replace(/[-_][a-z]/g, str => str.substr(1).toUpperCase())\r\n}\r\n\r\n/**\r\n * @template {Object.<string, any>} options\r\n * @param {options} defaults default options \r\n * @param {Partial<options>=} input provided input\r\n * @param {object} [configentOptions] configent options\r\n * @param {string=} [configentOptions.name = ''] name to use for configs. If left empty, name from package.json is used\r\n * @param {boolean=} [configentOptions.cacheConfig = true] calling configent twice with same parameters will return the same instance\r\n * @param {boolean=} [configentOptions.cacheDetectedDefaults = true] calling configent twice from the same module will return the same defaults\r\n * @param {boolean=} [configentOptions.useDotEnv = true] include config from .env files\r\n * @param {boolean=} [configentOptions.useEnv = true] include config from process.env\r\n * @param {boolean=} [configentOptions.usePackageConfig = true] include config from package.json\r\n * @param {boolean=} [configentOptions.useConfig = true] include config from [name].config.js\r\n * @param {boolean=} [configentOptions.useDetectDefaults = true] detect defaults from context (package.json and file stucture)\r\n * @param {string=} [configentOptions.detectDefaultsConfigPath = 'configs'] detect defaults from context (package.json and file stucture)\r\n * @param {function=} [configentOptions.sanitizeEnvValue = str => str.replace(/[-_][a-z]/g, str => str.substr(1).toUpperCase())] sanitize environment values. Convert snake_case to camelCase by default. \r\n * @param {NodeModule} [configentOptions.module] required if multiple modules are using configent\r\n * @returns {options}\r\n */\r\nfunction configent(defaults, input = {}, configentOptions) {\r\n    configentOptions = { ..._defaults, ...configentOptions }\r\n    const getParentModuleDir = createGetParentModuleDir(configentOptions)\r\n    configentOptions.name = configentOptions.name || require(resolve(getParentModuleDir(), 'package.json')).name\r\n\r\n    const {\r\n        name,\r\n        cacheConfig,\r\n        cacheDetectedDefaults,\r\n        useDotEnv,\r\n        sanitizeEnvValue,\r\n        useConfig,\r\n        useEnv,\r\n        usePackageConfig,\r\n        useDetectDefaults,\r\n        detectDefaultsConfigPath\r\n    } = configentOptions\r\n    const upperCaseRE = new RegExp(`^${name.toUpperCase()}_`)\r\n\r\n    return buildConfig()\r\n\r\n    function buildConfig() {\r\n        delete (configentOptions.module)\r\n        const hash = JSON.stringify({ name, defaults, input, configentOptions })\r\n        if (!instances[hash] || !cacheConfig) {\r\n            instances[hash] = {\r\n                ...defaults,\r\n                ...useDetectDefaults && getDetectDefaults(),\r\n                ...usePackageConfig && getPackageConfig(),\r\n                ...useConfig && getUserConfig(),\r\n                ...useEnv && getEnvConfig(),\r\n                ...input\r\n            }\r\n        }\r\n        return instances[hash]\r\n    }\r\n\r\n    function getEnvConfig() {\r\n        useDotEnv && require('dotenv').config()\r\n        const entries = Object.entries(process.env)\r\n            .filter(([key]) => key.match(upperCaseRE))\r\n            .map(parseField)\r\n\r\n        if (entries.length)\r\n            return entries.reduce((prev, { key, value }) => ({ ...prev, [key]: value }), {})\r\n\r\n        function parseField([key, value]) {\r\n            const shouldParseValue = k => typeof defaults[k] === 'object'\r\n\r\n            key = sanitizeEnvValue(key.replace(upperCaseRE, ''))\r\n            value = shouldParseValue(key) ? JSON.parse(value) : value\r\n            return { key, value }\r\n        }\r\n    }\r\n\r\n    function getUserConfig() {\r\n        const path = resolve(process.cwd(), `${name}.config.js`)\r\n        return existsSync(path) ? require(path) : {}\r\n    }\r\n\r\n    function getPackageConfig() {\r\n        const path = resolve(process.cwd(), 'package.json')\r\n        return existsSync(path) && require(path)[name]\r\n    }\r\n\r\n    function getDetectDefaults() {\r\n        const hash = JSON.stringify({ name, path: module['parent'].path })\r\n\r\n        // we only want to detect the defaults for any given module once\r\n        if (!detectedFromDefaults[hash] || !cacheDetectedDefaults) {\r\n            const pkgjson = { dependencies: {}, devDependencies: {} };\r\n            if (existsSync('package.json')) {\r\n                Object.assign(pkgjson, require(resolve(process.cwd(), 'package.json')));\r\n            }\r\n\r\n            Object.assign(pkgjson.dependencies, pkgjson.devDependencies)\r\n\r\n            const unsortedConfigTemplates = readdirSync(resolve(getParentModuleDir(), detectDefaultsConfigPath))\r\n                .map(file => ({\r\n                    file,\r\n                    ...require(resolve(getParentModuleDir(), detectDefaultsConfigPath, file))\r\n                }))\r\n            const configTemplates = sortBySupersedings(unsortedConfigTemplates)\r\n                .filter(configTemplate => configTemplate.condition({ pkgjson }))\r\n                .reverse()\r\n            if (configTemplates) {\r\n                if (configTemplates.length > 1) // we don't care about the default template\r\n                console.log(`[%s] detected defaults from %s`, name, configTemplates.filter(template => template.file !== 'default.config.js').map(template => template.name).join(', '))\r\n                detectedFromDefaults[hash] = Object.assign({}, ...configTemplates.map(template => template.config({ pkgjson })))\r\n            }\r\n        }\r\n        return detectedFromDefaults[hash]\r\n    }\r\n}\r\n\r\nmodule.exports = { configent }\r\n\r\nfunction sortBySupersedings(arr) {\r\n    // clone the array\r\n    arr = [...arr]\r\n    const sorted = []\r\n\r\n    while (arr.length) {\r\n        let foundMatch = false\r\n        const supersedings = [].concat(...arr.map(entry => entry.supersedes || []))\r\n        for (const [index, entry] of arr.entries()) {\r\n            const file = entry.file.replace(/\\.config\\.js/, '')\r\n            if (!supersedings.includes(file)) {\r\n                sorted.push(...arr.splice(index, 1))\r\n                foundMatch = true\r\n                break\r\n            }\r\n        }\r\n        // each iteration should find and pluck one match\r\n        if (!foundMatch) throw Error('Looks like you have circular supersedings \\n' + arr.map(f => `${f.file} supersedes ${f.supersedes}`).join('\\n'))\r\n    }\r\n\r\n    return sorted\r\n}\r\n\r\nfunction createGetParentModuleDir(options) {\r\n    const { module } = options\r\n    let parentModuleDir\r\n    return () => {\r\n        parentModuleDir = parentModuleDir || _getParentModuleDir(module && module.path)\r\n        return parentModuleDir\r\n    }\r\n}\r\n\r\n// walk through parents till we find a package.json\r\nfunction _getParentModuleDir(path) {\r\n    if (!path) {\r\n        const modules = Object.values(require.cache)\r\n            /** @ts-ignore */\r\n            .filter((m) => m.children.includes(module))\r\n        if (modules.length >= 2) missingModuleError(modules)\r\n        else path = modules[0].path\r\n    }\r\n\r\n    return (existsSync(resolve(path, 'package.json'))) ?\r\n        path : _getParentModuleDir(dirname(path))\r\n}\r\n\r\nfunction missingModuleError(modules) {\r\n    const paths = modules.map(m => _getParentModuleDir(m.path))\r\n    throw new Error([\r\n        `if multiple packages are using configent, they all need to provide the module.`,\r\n        `Packages using configent: `,\r\n        ...paths.map(p => '- ' + p),\r\n        `Updating the packages may fix the problem.`, ''\r\n    ].join('\\n'))\r\n}"],
  "mappings": "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",
  "names": ["str", "module"]
}
