FROM node:18-slim as builder

RUN apt-get update && apt-get install -y --no-install-recommends g++ make python3 jq


WORKDIR /builder

COPY package.json .
COPY yarn.lock .
COPY lerna.json .

COPY packages/backend-core/package.json packages/backend-core/
COPY packages/bbui/package.json packages/bbui/
COPY packages/builder/package.json packages/builder/
COPY packages/cli/package.json packages/cli/
COPY packages/client/package.json packages/client/
COPY packages/frontend-core/package.json packages/frontend-core/
COPY packages/sdk/package.json packages/sdk/
COPY packages/server/package.json packages/server/
COPY packages/shared-core/package.json packages/shared-core/
COPY packages/string-templates/package.json packages/string-templates/
COPY packages/types/package.json packages/types/
COPY packages/worker/package.json packages/worker/
COPY packages/pro/package.json packages/pro/


# We will never want to sync pro, but the script is still required
RUN mkdir scripts && echo '' > scripts/syncProPackage.js
RUN yarn install --frozen-lockfile && yarn cache clean

COPY packages/ packages/
COPY scripts/build.js scripts/build.js
COPY nx.json .

RUN yarn build --scope @budibase/client --scope @budibase/builder --scope @budibase/server

COPY scripts/removeWorkspaceDependencies.sh scripts/removeWorkspaceDependencies.sh
RUN ./scripts/removeWorkspaceDependencies.sh packages/server/package.json



FROM node:18-slim as runner

LABEL com.centurylinklabs.watchtower.lifecycle.pre-check="scripts/watchtower-hooks/pre-check.sh"
LABEL com.centurylinklabs.watchtower.lifecycle.pre-update="scripts/watchtower-hooks/pre-update.sh"
LABEL com.centurylinklabs.watchtower.lifecycle.post-update="scripts/watchtower-hooks/post-update.sh"
LABEL com.centurylinklabs.watchtower.lifecycle.post-check="scripts/watchtower-hooks/post-check.sh"

WORKDIR /app

ENV PORT=4001
ENV COUCH_DB_URL=https://couchdb.budi.live:5984
ENV BUDIBASE_ENVIRONMENT=PRODUCTION
ENV SERVICE=app-service
ENV POSTHOG_TOKEN=phc_bIjZL7oh2GEUd2vqvTBH8WvrX0fWTFQMs6H5KQxiUxU
ENV TENANT_FEATURE_FLAGS=*:LICENSING,*:USER_GROUPS,*:ONBOARDING_TOUR
ENV ACCOUNT_PORTAL_URL=https://account.budibase.app
ENV TOP_LEVEL_PATH=/

# handle node-gyp
RUN apt-get update
#     && apt-get install -y --no-install-recommends g++ make python
RUN yarn global add pm2

# Install client for oracle datasource
RUN apt-get install unzip libaio1
COPY packages/server/scripts/integrations/oracle/ scripts/integrations/oracle/
RUN /bin/bash -e scripts/integrations/oracle/instantclient/linux/x86-64/install.sh 

# Install postgres client for pg_dump utils
RUN apt update && apt upgrade -y \
    && apt install software-properties-common apt-transport-https curl gpg -y \
    && curl -fsSl https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | tee /usr/share/keyrings/postgresql.gpg > /dev/null \
    && echo deb [arch=amd64,arm64,ppc64el signed-by=/usr/share/keyrings/postgresql.gpg] http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main | tee /etc/apt/sources.list.d/postgresql.list \
    && apt update -y \
    && apt install postgresql-client-15 -y \
    && apt remove software-properties-common apt-transport-https curl gpg -y


COPY --from=builder /builder/package.json .
COPY --from=builder /builder/yarn.lock .
COPY --from=builder /builder/packages/server/package.json packages/server/

# We will never want to sync pro, but the script is still required
RUN echo '' > scripts/syncProPackage.js

# We want the clean in the same
RUN yarn install --production=true --frozen-lockfile && yarn cache clean

COPY --from=builder /builder/packages/server/dist packages/server/dist
COPY --from=builder /builder/packages/server/client client
COPY --from=builder /builder/packages/server/builder builder

COPY lerna.json .

WORKDIR /app/packages/server

COPY packages/server/docker_run.sh .

EXPOSE 4001

# have to add node environment production after install
# due to this causing yarn to stop installing dev dependencies
# which are actually needed to get this environment up and running
ENV NODE_ENV=production
ENV CLUSTER_MODE=${CLUSTER_MODE}
ENV TOP_LEVEL_PATH=/app

CMD ["./docker_run.sh"]
