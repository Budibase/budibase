import { EmptyFilterOption } from "../../../../sdk";
import { Row } from "../../../../documents";
import { PaginationResponse, SortOrder, SortType } from "../../../../api/web/pagination";
import { z } from "zod";
declare const searchRowRequest: z.ZodObject<{
    query: z.ZodOptional<z.ZodObject<{
        equal: z.ZodTypeAny;
        notEqual: z.ZodTypeAny;
        empty: z.ZodTypeAny;
        notEmpty: z.ZodTypeAny;
        fuzzy: z.ZodTypeAny;
        string: z.ZodTypeAny;
        $and: z.ZodTypeAny;
        $or: z.ZodTypeAny;
        range: z.ZodTypeAny;
        contains: z.ZodTypeAny;
        notContains: z.ZodTypeAny;
        containsAny: z.ZodTypeAny;
        oneOf: z.ZodTypeAny;
        allOr: z.ZodOptional<z.ZodBoolean>;
        onEmptyFilter: z.ZodOptional<z.ZodNativeEnum<typeof EmptyFilterOption>>;
    }, "strip", z.ZodTypeAny, {
        equal?: any;
        notEqual?: any;
        empty?: any;
        notEmpty?: any;
        fuzzy?: any;
        string?: any;
        $and?: any;
        $or?: any;
        range?: any;
        contains?: any;
        notContains?: any;
        containsAny?: any;
        oneOf?: any;
        allOr?: boolean | undefined;
        onEmptyFilter?: EmptyFilterOption | undefined;
    }, {
        equal?: any;
        notEqual?: any;
        empty?: any;
        notEmpty?: any;
        fuzzy?: any;
        string?: any;
        $and?: any;
        $or?: any;
        range?: any;
        contains?: any;
        notContains?: any;
        containsAny?: any;
        oneOf?: any;
        allOr?: boolean | undefined;
        onEmptyFilter?: EmptyFilterOption | undefined;
    }>>;
    paginate: z.ZodOptional<z.ZodBoolean>;
    bookmark: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodNumber]>>>;
    limit: z.ZodOptional<z.ZodNumber>;
    sort: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    sortOrder: z.ZodOptional<z.ZodNativeEnum<typeof SortOrder>>;
    sortType: z.ZodOptional<z.ZodNullable<z.ZodNativeEnum<typeof SortType>>>;
    version: z.ZodOptional<z.ZodString>;
    disableEscaping: z.ZodOptional<z.ZodBoolean>;
    countRows: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    version?: string | undefined;
    query?: {
        equal?: any;
        notEqual?: any;
        empty?: any;
        notEmpty?: any;
        fuzzy?: any;
        string?: any;
        $and?: any;
        $or?: any;
        range?: any;
        contains?: any;
        notContains?: any;
        containsAny?: any;
        oneOf?: any;
        allOr?: boolean | undefined;
        onEmptyFilter?: EmptyFilterOption | undefined;
    } | undefined;
    sort?: string | null | undefined;
    paginate?: boolean | undefined;
    bookmark?: string | number | null | undefined;
    limit?: number | undefined;
    sortOrder?: SortOrder | undefined;
    sortType?: SortType | null | undefined;
    disableEscaping?: boolean | undefined;
    countRows?: boolean | undefined;
}, {
    version?: string | undefined;
    query?: {
        equal?: any;
        notEqual?: any;
        empty?: any;
        notEmpty?: any;
        fuzzy?: any;
        string?: any;
        $and?: any;
        $or?: any;
        range?: any;
        contains?: any;
        notContains?: any;
        containsAny?: any;
        oneOf?: any;
        allOr?: boolean | undefined;
        onEmptyFilter?: EmptyFilterOption | undefined;
    } | undefined;
    sort?: string | null | undefined;
    paginate?: boolean | undefined;
    bookmark?: string | number | null | undefined;
    limit?: number | undefined;
    sortOrder?: SortOrder | undefined;
    sortType?: SortType | null | undefined;
    disableEscaping?: boolean | undefined;
    countRows?: boolean | undefined;
}>;
export declare const searchRowRequestValidator: z.ZodObject<{
    query: z.ZodOptional<z.ZodObject<{
        equal: z.ZodTypeAny;
        notEqual: z.ZodTypeAny;
        empty: z.ZodTypeAny;
        notEmpty: z.ZodTypeAny;
        fuzzy: z.ZodTypeAny;
        string: z.ZodTypeAny;
        $and: z.ZodTypeAny;
        $or: z.ZodTypeAny;
        range: z.ZodTypeAny;
        contains: z.ZodTypeAny;
        notContains: z.ZodTypeAny;
        containsAny: z.ZodTypeAny;
        oneOf: z.ZodTypeAny;
        allOr: z.ZodOptional<z.ZodBoolean>;
        onEmptyFilter: z.ZodOptional<z.ZodNativeEnum<typeof EmptyFilterOption>>;
    }, "strip", z.ZodTypeAny, {
        equal?: any;
        notEqual?: any;
        empty?: any;
        notEmpty?: any;
        fuzzy?: any;
        string?: any;
        $and?: any;
        $or?: any;
        range?: any;
        contains?: any;
        notContains?: any;
        containsAny?: any;
        oneOf?: any;
        allOr?: boolean | undefined;
        onEmptyFilter?: EmptyFilterOption | undefined;
    }, {
        equal?: any;
        notEqual?: any;
        empty?: any;
        notEmpty?: any;
        fuzzy?: any;
        string?: any;
        $and?: any;
        $or?: any;
        range?: any;
        contains?: any;
        notContains?: any;
        containsAny?: any;
        oneOf?: any;
        allOr?: boolean | undefined;
        onEmptyFilter?: EmptyFilterOption | undefined;
    }>>;
    paginate: z.ZodOptional<z.ZodBoolean>;
    bookmark: z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodNumber]>>>;
    limit: z.ZodOptional<z.ZodNumber>;
    sort: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    sortOrder: z.ZodOptional<z.ZodNativeEnum<typeof SortOrder>>;
    sortType: z.ZodOptional<z.ZodNullable<z.ZodNativeEnum<typeof SortType>>>;
    version: z.ZodOptional<z.ZodString>;
    disableEscaping: z.ZodOptional<z.ZodBoolean>;
    countRows: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    version?: string | undefined;
    query?: {
        equal?: any;
        notEqual?: any;
        empty?: any;
        notEmpty?: any;
        fuzzy?: any;
        string?: any;
        $and?: any;
        $or?: any;
        range?: any;
        contains?: any;
        notContains?: any;
        containsAny?: any;
        oneOf?: any;
        allOr?: boolean | undefined;
        onEmptyFilter?: EmptyFilterOption | undefined;
    } | undefined;
    sort?: string | null | undefined;
    paginate?: boolean | undefined;
    bookmark?: string | number | null | undefined;
    limit?: number | undefined;
    sortOrder?: SortOrder | undefined;
    sortType?: SortType | null | undefined;
    disableEscaping?: boolean | undefined;
    countRows?: boolean | undefined;
}, {
    version?: string | undefined;
    query?: {
        equal?: any;
        notEqual?: any;
        empty?: any;
        notEmpty?: any;
        fuzzy?: any;
        string?: any;
        $and?: any;
        $or?: any;
        range?: any;
        contains?: any;
        notContains?: any;
        containsAny?: any;
        oneOf?: any;
        allOr?: boolean | undefined;
        onEmptyFilter?: EmptyFilterOption | undefined;
    } | undefined;
    sort?: string | null | undefined;
    paginate?: boolean | undefined;
    bookmark?: string | number | null | undefined;
    limit?: number | undefined;
    sortOrder?: SortOrder | undefined;
    sortType?: SortType | null | undefined;
    disableEscaping?: boolean | undefined;
    countRows?: boolean | undefined;
}>;
export type SearchRowRequest = z.infer<typeof searchRowRequest>;
export type SearchViewRowRequest = Pick<SearchRowRequest, "sort" | "sortOrder" | "sortType" | "limit" | "bookmark" | "paginate" | "query" | "countRows">;
export interface SearchRowResponse {
    rows: Row[];
}
export interface PaginatedSearchRowResponse extends SearchRowResponse, PaginationResponse {
}
export {};
